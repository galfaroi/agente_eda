 <!doctype html> <html class="no-js" lang="en" data-content_root="./">   <head><meta charset="utf-8"/>     <meta name="viewport" content="width=device-width,initial-scale=1"/>     <meta name="color-scheme" content="light dark"><link rel="index" title="Index" href="genindex.html" /><link rel="search" title="Search" href="search.html" />      <link rel="shortcut icon" href="_static/favico.png"/><!-- Generated with Sphinx 8.0.2 and Furo 2024.08.06 --><title>Command Reference - YosysHQ Yosys 0.45-dev documentation</title> <link rel="stylesheet" type="text/css" href="_static/pygments.css?v=82a976d7" />     <link rel="stylesheet" type="text/css" href="_static/styles/furo.css?v=354aac6f" />     <link rel="stylesheet" type="text/css" href="/_/static/css/badge_only.css" />     <link rel="stylesheet" type="text/css" href="_static/styles/furo-extensions.css?v=302659d7" />     <link rel="stylesheet" type="text/css" href="_static/yosyshq.css?v=03c1aeee" />     <link rel="stylesheet" type="text/css" href="_static/custom.css?v=63c85a92" />             <style>   body {     --color-code-background: #ffffff;   --color-code-foreground: black;   --color-brand-primary: #d6368f;   --color-brand-content: #4b72b8;   --color-api-name: #8857a3;   --color-api-pre-name: #4b72b8;   --color-link: #8857a3;      }   @media not print {     body[data-theme="dark"] {       --color-code-background: #202020;   --color-code-foreground: #d0d0d0;   --color-brand-primary: #e488bb;   --color-brand-content: #98bdff;   --color-api-name: #8857a3;   --color-api-pre-name: #4b72b8;   --color-link: #be95d5;        }     @media (prefers-color-scheme: dark) {       body:not([data-theme="light"]) {         --color-code-background: #202020;   --color-code-foreground: #d0d0d0;   --color-brand-primary: #e488bb;   --color-brand-content: #98bdff;   --color-api-name: #8857a3;   --color-api-pre-name: #4b72b8;   --color-link: #be95d5;          }     }   } </style> <!-- RTD Extra Head -->  <link rel="stylesheet" href="/_/static/css/readthedocs-doc-embed.css" type="text/css" />  <script type="application/json" id="READTHEDOCS_DATA">{"ad_free": true, "api_host": "https://readthedocs.org", "builder": "sphinx", "canonical_url": null, "docroot": "/docs/source/", "features": {"docsearch_disabled": false}, "global_analytics_code": "UA-17997319-1", "language": "en", "page": "cmd-cmd", "programming_language": "words", "project": "yosys", "proxied_api_host": "/_", "source_suffix": ".rst", "subprojects": {}, "theme": "furo", "user_analytics_code": "", "version": "latest"}</script>  <!-- Using this variable directly instead of using `JSON.parse` is deprecated. The READTHEDOCS_DATA global variable will be removed in the future. --> <script type="text/javascript"> READTHEDOCS_DATA = JSON.parse(document.getElementById('READTHEDOCS_DATA').innerHTML); </script>  <script type="text/javascript" src="/_/static/javascript/readthedocs-analytics.js" async="async"></script>  <!-- end RTD <extrahead> --> </head>   <body>          <script>       document.body.dataset.theme = localStorage.getItem("theme") || "auto";     </script>       <svg xmlns="http://www.w3.org/2000/svg" style="display: none;">   <symbol id="svg-toc" viewBox="0 0 24 24">     <title>Contents</title>     <svg stroke="currentColor" fill="currentColor" stroke-width="0" viewBox="0 0 1024 1024">       <path d="M408 442h480c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8H408c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8zm-8 204c0 4.4 3.6 8 8 8h480c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8H408c-4.4 0-8 3.6-8 8v56zm504-486H120c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h784c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8zm0 632H120c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h784c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8zM115.4 518.9L271.7 642c5.8 4.6 14.4.5 14.4-6.9V388.9c0-7.4-8.5-11.5-14.4-6.9L115.4 505.1a8.74 8.74 0 0 0 0 13.8z"/>     </svg>   </symbol>   <symbol id="svg-menu" viewBox="0 0 24 24">     <title>Menu</title>     <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor"       stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather-menu">       <line x1="3" y1="12" x2="21" y2="12"></line>       <line x1="3" y1="6" x2="21" y2="6"></line>       <line x1="3" y1="18" x2="21" y2="18"></line>     </svg>   </symbol>   <symbol id="svg-arrow-right" viewBox="0 0 24 24">     <title>Expand</title>     <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor"       stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather-chevron-right">       <polyline points="9 18 15 12 9 6"></polyline>     </svg>   </symbol>   <symbol id="svg-sun" viewBox="0 0 24 24">     <title>Light mode</title>     <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor"       stroke-width="1" stroke-linecap="round" stroke-linejoin="round" class="feather-sun">       <circle cx="12" cy="12" r="5"></circle>       <line x1="12" y1="1" x2="12" y2="3"></line>       <line x1="12" y1="21" x2="12" y2="23"></line>       <line x1="4.22" y1="4.22" x2="5.64" y2="5.64"></line>       <line x1="18.36" y1="18.36" x2="19.78" y2="19.78"></line>       <line x1="1" y1="12" x2="3" y2="12"></line>       <line x1="21" y1="12" x2="23" y2="12"></line>       <line x1="4.22" y1="19.78" x2="5.64" y2="18.36"></line>       <line x1="18.36" y1="5.64" x2="19.78" y2="4.22"></line>     </svg>   </symbol>   <symbol id="svg-moon" viewBox="0 0 24 24">     <title>Dark mode</title>     <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor"       stroke-width="1" stroke-linecap="round" stroke-linejoin="round" class="icon-tabler-moon">       <path stroke="none" d="M0 0h24v24H0z" fill="none" />       <path d="M12 3c.132 0 .263 0 .393 0a7.5 7.5 0 0 0 7.92 12.446a9 9 0 1 1 -8.313 -12.454z" />     </svg>   </symbol>   <symbol id="svg-sun-with-moon" viewBox="0 0 24 24">     <title>Auto light/dark, in light mode</title>     <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor"       stroke-width="1" stroke-linecap="round" stroke-linejoin="round"       class="icon-custom-derived-from-feather-sun-and-tabler-moon">       <path style="opacity: 50%" d="M 5.411 14.504 C 5.471 14.504 5.532 14.504 5.591 14.504 C 3.639 16.319 4.383 19.569 6.931 20.352 C 7.693 20.586 8.512 20.551 9.25 20.252 C 8.023 23.207 4.056 23.725 2.11 21.184 C 0.166 18.642 1.702 14.949 4.874 14.536 C 5.051 14.512 5.231 14.5 5.411 14.5 L 5.411 14.504 Z"/>       <line x1="14.5" y1="3.25" x2="14.5" y2="1.25"/>       <line x1="14.5" y1="15.85" x2="14.5" y2="17.85"/>       <line x1="10.044" y1="5.094" x2="8.63" y2="3.68"/>       <line x1="19" y1="14.05" x2="20.414" y2="15.464"/>       <line x1="8.2" y1="9.55" x2="6.2" y2="9.55"/>       <line x1="20.8" y1="9.55" x2="22.8" y2="9.55"/>       <line x1="10.044" y1="14.006" x2="8.63" y2="15.42"/>       <line x1="19" y1="5.05" x2="20.414" y2="3.636"/>       <circle cx="14.5" cy="9.55" r="3.6"/>     </svg>   </symbol>   <symbol id="svg-moon-with-sun" viewBox="0 0 24 24">     <title>Auto light/dark, in dark mode</title>     <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor"       stroke-width="1" stroke-linecap="round" stroke-linejoin="round"       class="icon-custom-derived-from-feather-sun-and-tabler-moon">       <path d="M 8.282 7.007 C 8.385 7.007 8.494 7.007 8.595 7.007 C 5.18 10.184 6.481 15.869 10.942 17.24 C 12.275 17.648 13.706 17.589 15 17.066 C 12.851 22.236 5.91 23.143 2.505 18.696 C -0.897 14.249 1.791 7.786 7.342 7.063 C 7.652 7.021 7.965 7 8.282 7 L 8.282 7.007 Z"/>       <line style="opacity: 50%" x1="18" y1="3.705" x2="18" y2="2.5"/>       <line style="opacity: 50%" x1="18" y1="11.295" x2="18" y2="12.5"/>       <line style="opacity: 50%" x1="15.316" y1="4.816" x2="14.464" y2="3.964"/>       <line style="opacity: 50%" x1="20.711" y1="10.212" x2="21.563" y2="11.063"/>       <line style="opacity: 50%" x1="14.205" y1="7.5" x2="13.001" y2="7.5"/>       <line style="opacity: 50%" x1="21.795" y1="7.5" x2="23" y2="7.5"/>       <line style="opacity: 50%" x1="15.316" y1="10.184" x2="14.464" y2="11.036"/>       <line style="opacity: 50%" x1="20.711" y1="4.789" x2="21.563" y2="3.937"/>       <circle style="opacity: 50%" cx="18" cy="7.5" r="2.169"/>     </svg>   </symbol>   <symbol id="svg-pencil" viewBox="0 0 24 24">     <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor"       stroke-width="1" stroke-linecap="round" stroke-linejoin="round" class="icon-tabler-pencil-code">       <path d="M4 20h4l10.5 -10.5a2.828 2.828 0 1 0 -4 -4l-10.5 10.5v4" />       <path d="M13.5 6.5l4 4" />       <path d="M20 21l2 -2l-2 -2" />       <path d="M17 17l-2 2l2 2" />     </svg>   </symbol>   <symbol id="svg-eye" viewBox="0 0 24 24">     <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor"       stroke-width="1" stroke-linecap="round" stroke-linejoin="round" class="icon-tabler-eye-code">       <path stroke="none" d="M0 0h24v24H0z" fill="none" />       <path d="M10 12a2 2 0 1 0 4 0a2 2 0 0 0 -4 0" />       <path         d="M11.11 17.958c-3.209 -.307 -5.91 -2.293 -8.11 -5.958c2.4 -4 5.4 -6 9 -6c3.6 0 6.6 2 9 6c-.21 .352 -.427 .688 -.647 1.008" />       <path d="M20 21l2 -2l-2 -2" />       <path d="M17 17l-2 2l2 2" />     </svg>   </symbol> </svg>  <input type="checkbox" class="sidebar-toggle" name="__navigation" id="__navigation"> <input type="checkbox" class="sidebar-toggle" name="__toc" id="__toc"> <label class="overlay sidebar-overlay" for="__navigation">   <div class="visually-hidden">Hide navigation sidebar</div> </label> <label class="overlay toc-overlay" for="__toc">   <div class="visually-hidden">Hide table of contents sidebar</div> </label>  <a class="skip-to-content muted-link" href="#furo-main-content">Skip to content</a>    <div class="page">   <header class="mobile-header">     <div class="header-left">       <label class="nav-overlay-icon" for="__navigation">         <div class="visually-hidden">Toggle site navigation sidebar</div>         <i class="icon"><svg><use href="#svg-menu"></use></svg></i>       </label>     </div>     <div class="header-center">       <a href="index.html"><div class="brand">YosysHQ Yosys 0.45-dev documentation</div></a>     </div>     <div class="header-right">       <div class="theme-toggle-container theme-toggle-header">         <button class="theme-toggle">           <div class="visually-hidden">Toggle Light / Dark / Auto color theme</div>           <svg class="theme-icon-when-auto-light"><use href="#svg-sun-with-moon"></use></svg>           <svg class="theme-icon-when-auto-dark"><use href="#svg-moon-with-sun"></use></svg>           <svg class="theme-icon-when-dark"><use href="#svg-moon"></use></svg>           <svg class="theme-icon-when-light"><use href="#svg-sun"></use></svg>         </button>       </div>       <label class="toc-overlay-icon toc-header-icon no-toc" for="__toc">         <div class="visually-hidden">Toggle table of contents sidebar</div>         <i class="icon"><svg><use href="#svg-toc"></use></svg></i>       </label>     </div>   </header>   <aside class="sidebar-drawer">     <div class="sidebar-container">              <div class="sidebar-sticky"><a class="sidebar-brand" href="index.html">      <div class="sidebar-logo-container">     <img class="sidebar-logo" src="_static/logo.png" alt="Logo"/>   </div>       </a><form class="sidebar-search-container" method="get" action="search.html" role="search">   <input class="sidebar-search" placeholder="Search" name="q" aria-label="Search">   <input type="hidden" name="check_keywords" value="yes">   <input type="hidden" name="area" value="default"> </form> <div id="searchbox"></div><div class="sidebar-scroll"><div class="sidebar-tree">   <ul> <li class="toctree-l1"><a class="reference internal" href="introduction.html">What is Yosys</a></li> <li class="toctree-l1 has-children"><a class="reference internal" href="getting_started/index.html">Getting started with Yosys</a><input class="toctree-checkbox" id="toctree-checkbox-1" name="toctree-checkbox-1" role="switch" type="checkbox"/><label for="toctree-checkbox-1"><div class="visually-hidden">Toggle navigation of Getting started with Yosys</div><i class="icon"><svg><use href="#svg-arrow-right"></use></svg></i></label><ul> <li class="toctree-l2"><a class="reference internal" href="getting_started/installation.html">Installation</a></li> <li class="toctree-l2"><a class="reference internal" href="getting_started/example_synth.html">Synthesis starter</a></li> <li class="toctree-l2"><a class="reference internal" href="getting_started/scripting_intro.html">Scripting in Yosys</a></li> </ul> </li> <li class="toctree-l1 has-children"><a class="reference internal" href="using_yosys/index.html">Using Yosys (advanced)</a><input class="toctree-checkbox" id="toctree-checkbox-2" name="toctree-checkbox-2" role="switch" type="checkbox"/><label for="toctree-checkbox-2"><div class="visually-hidden">Toggle navigation of Using Yosys (advanced)</div><i class="icon"><svg><use href="#svg-arrow-right"></use></svg></i></label><ul> <li class="toctree-l2 has-children"><a class="reference internal" href="using_yosys/synthesis/index.html">Synthesis in detail</a><input class="toctree-checkbox" id="toctree-checkbox-3" name="toctree-checkbox-3" role="switch" type="checkbox"/><label for="toctree-checkbox-3"><div class="visually-hidden">Toggle navigation of Synthesis in detail</div><i class="icon"><svg><use href="#svg-arrow-right"></use></svg></i></label><ul> <li class="toctree-l3"><a class="reference internal" href="using_yosys/synthesis/synth.html">Synth commands</a></li> <li class="toctree-l3"><a class="reference internal" href="using_yosys/synthesis/proc.html">Converting process blocks</a></li> <li class="toctree-l3"><a class="reference internal" href="using_yosys/synthesis/fsm.html">FSM handling</a></li> <li class="toctree-l3"><a class="reference internal" href="using_yosys/synthesis/memory.html">Memory handling</a></li> <li class="toctree-l3"><a class="reference internal" href="using_yosys/synthesis/opt.html">Optimization passes</a></li> <li class="toctree-l3"><a class="reference internal" href="using_yosys/synthesis/techmap_synth.html">Technology mapping</a></li> <li class="toctree-l3"><a class="reference internal" href="using_yosys/synthesis/extract.html">The extract pass</a></li> <li class="toctree-l3"><a class="reference internal" href="using_yosys/synthesis/abc.html">The ABC toolbox</a></li> <li class="toctree-l3"><a class="reference internal" href="using_yosys/synthesis/cell_libs.html">Mapping to cell libraries</a></li> </ul> </li> <li class="toctree-l2 has-children"><a class="reference internal" href="using_yosys/more_scripting/index.html">More scripting</a><input class="toctree-checkbox" id="toctree-checkbox-4" name="toctree-checkbox-4" role="switch" type="checkbox"/><label for="toctree-checkbox-4"><div class="visually-hidden">Toggle navigation of More scripting</div><i class="icon"><svg><use href="#svg-arrow-right"></use></svg></i></label><ul> <li class="toctree-l3"><a class="reference internal" href="using_yosys/more_scripting/load_design.html">Loading a design</a></li> <li class="toctree-l3"><a class="reference internal" href="using_yosys/more_scripting/selections.html">Selections</a></li> <li class="toctree-l3"><a class="reference internal" href="using_yosys/more_scripting/interactive_investigation.html">Interactive design investigation</a></li> <li class="toctree-l3"><a class="reference internal" href="using_yosys/more_scripting/model_checking.html">Symbolic model checking</a></li> </ul> </li> </ul> </li> <li class="toctree-l1 has-children"><a class="reference internal" href="yosys_internals/index.html">Yosys internals</a><input class="toctree-checkbox" id="toctree-checkbox-5" name="toctree-checkbox-5" role="switch" type="checkbox"/><label for="toctree-checkbox-5"><div class="visually-hidden">Toggle navigation of Yosys internals</div><i class="icon"><svg><use href="#svg-arrow-right"></use></svg></i></label><ul> <li class="toctree-l2 has-children"><a class="reference internal" href="yosys_internals/flow/index.html">Internal flow</a><input class="toctree-checkbox" id="toctree-checkbox-6" name="toctree-checkbox-6" role="switch" type="checkbox"/><label for="toctree-checkbox-6"><div class="visually-hidden">Toggle navigation of Internal flow</div><i class="icon"><svg><use href="#svg-arrow-right"></use></svg></i></label><ul> <li class="toctree-l3"><a class="reference internal" href="yosys_internals/flow/overview.html">Flow overview</a></li> <li class="toctree-l3"><a class="reference internal" href="yosys_internals/flow/control_and_data.html">Control and data flow</a></li> <li class="toctree-l3"><a class="reference internal" href="yosys_internals/flow/verilog_frontend.html">The Verilog and AST frontends</a></li> </ul> </li> <li class="toctree-l2 has-children"><a class="reference internal" href="yosys_internals/formats/index.html">Internal formats</a><input class="toctree-checkbox" id="toctree-checkbox-7" name="toctree-checkbox-7" role="switch" type="checkbox"/><label for="toctree-checkbox-7"><div class="visually-hidden">Toggle navigation of Internal formats</div><i class="icon"><svg><use href="#svg-arrow-right"></use></svg></i></label><ul> <li class="toctree-l3"><a class="reference internal" href="yosys_internals/formats/overview.html">Format overview</a></li> <li class="toctree-l3"><a class="reference internal" href="yosys_internals/formats/rtlil_rep.html">The RTL Intermediate Language (RTLIL)</a></li> <li class="toctree-l3"><a class="reference internal" href="yosys_internals/formats/rtlil_text.html">RTLIL text representation</a></li> <li class="toctree-l3"><a class="reference internal" href="yosys_internals/formats/cell_library.html">Internal cell library</a></li> </ul> </li> <li class="toctree-l2 has-children"><a class="reference internal" href="yosys_internals/extending_yosys/index.html">Working with the Yosys codebase</a><input class="toctree-checkbox" id="toctree-checkbox-8" name="toctree-checkbox-8" role="switch" type="checkbox"/><label for="toctree-checkbox-8"><div class="visually-hidden">Toggle navigation of Working with the Yosys codebase</div><i class="icon"><svg><use href="#svg-arrow-right"></use></svg></i></label><ul> <li class="toctree-l3"><a class="reference internal" href="yosys_internals/extending_yosys/extensions.html">Writing extensions</a></li> <li class="toctree-l3"><a class="reference internal" href="yosys_internals/extending_yosys/build_verific.html">Compiling with Verific library</a></li> <li class="toctree-l3"><a class="reference internal" href="yosys_internals/extending_yosys/test_suites.html">Testing Yosys</a></li> </ul> </li> <li class="toctree-l2"><a class="reference internal" href="yosys_internals/techmap.html">Techmap by example</a></li> </ul> </li> <li class="toctree-l1 has-children"><a class="reference internal" href="appendix.html">Appendix</a><input class="toctree-checkbox" id="toctree-checkbox-9" name="toctree-checkbox-9" role="switch" type="checkbox"/><label for="toctree-checkbox-9"><div class="visually-hidden">Toggle navigation of Appendix</div><i class="icon"><svg><use href="#svg-arrow-right"></use></svg></i></label><ul> <li class="toctree-l2"><a class="reference internal" href="appendix/primer.html">A primer on digital circuit synthesis</a></li> <li class="toctree-l2"><a class="reference internal" href="appendix/auxlibs.html">Auxiliary libraries</a></li> <li class="toctree-l2"><a class="reference internal" href="appendix/auxprogs.html">Auxiliary programs</a></li> <li class="toctree-l2"><a class="reference internal" href="bib.html">Literature references</a></li> <li class="toctree-l2 has-children"><a class="reference internal" href="cmd_ref.html">Command line reference</a><input class="toctree-checkbox" id="toctree-checkbox-10" name="toctree-checkbox-10" role="switch" type="checkbox"/><label for="toctree-checkbox-10"><div class="visually-hidden">Toggle navigation of Command line reference</div><i class="icon"><svg><use href="#svg-arrow-right"></use></svg></i></label><ul> <li class="toctree-l3"><a class="reference internal" href="appendix/env_vars.html">Yosys environment variables</a></li> <li class="toctree-l3"><a class="reference internal" href="cmd/abc.html">abc - use ABC for technology mapping</a></li> <li class="toctree-l3"><a class="reference internal" href="cmd/abc9.html">abc9 - use ABC9 for technology mapping</a></li> <li class="toctree-l3"><a class="reference internal" href="cmd/abc9_exe.html">abc9_exe - use ABC9 for technology mapping</a></li> <li class="toctree-l3"><a class="reference internal" href="cmd/abc9_ops.html">abc9_ops - helper functions for ABC9</a></li> <li class="toctree-l3"><a class="reference internal" href="cmd/add.html">add - add objects to the design</a></li> <li class="toctree-l3"><a class="reference internal" href="cmd/aigmap.html">aigmap - map logic to and-inverter-graph circuit</a></li> <li class="toctree-l3"><a class="reference internal" href="cmd/alumacc.html">alumacc - extract ALU and MACC cells</a></li> <li class="toctree-l3"><a class="reference internal" href="cmd/anlogic_eqn.html">anlogic_eqn - Anlogic: Calculate equations for luts</a></li> <li class="toctree-l3"><a class="reference internal" href="cmd/anlogic_fixcarry.html">anlogic_fixcarry - Anlogic: fix carry chain</a></li> <li class="toctree-l3"><a class="reference internal" href="cmd/assertpmux.html">assertpmux - adds asserts for parallel muxes</a></li> <li class="toctree-l3"><a class="reference internal" href="cmd/async2sync.html">async2sync - convert async FF inputs to sync circuits</a></li> <li class="toctree-l3"><a class="reference internal" href="cmd/attrmap.html">attrmap - renaming attributes</a></li> <li class="toctree-l3"><a class="reference internal" href="cmd/attrmvcp.html">attrmvcp - move or copy attributes from wires to driving cells</a></li> <li class="toctree-l3"><a class="reference internal" href="cmd/autoname.html">autoname - automatically assign names to objects</a></li> <li class="toctree-l3"><a class="reference internal" href="cmd/blackbox.html">blackbox - convert modules into blackbox modules</a></li> <li class="toctree-l3"><a class="reference internal" href="cmd/bmuxmap.html">bmuxmap - transform $bmux cells to trees of $mux cells</a></li> <li class="toctree-l3"><a class="reference internal" href="cmd/booth.html">booth - map $mul cells to Booth multipliers</a></li> <li class="toctree-l3"><a class="reference internal" href="cmd/box_derive.html">box_derive - derive box modules</a></li> <li class="toctree-l3"><a class="reference internal" href="cmd/bugpoint.html">bugpoint - minimize testcases</a></li> <li class="toctree-l3"><a class="reference internal" href="cmd/bwmuxmap.html">bwmuxmap - replace $bwmux cells with equivalent logic</a></li> <li class="toctree-l3"><a class="reference internal" href="cmd/cd.html">cd - a shortcut for ‘select -module &lt;name&gt;’</a></li> <li class="toctree-l3"><a class="reference internal" href="cmd/cellmatch.html">cellmatch - match cells to their targets in cell library</a></li> <li class="toctree-l3"><a class="reference internal" href="cmd/check.html">check - check for obvious problems in the design</a></li> <li class="toctree-l3"><a class="reference internal" href="cmd/chformal.html">chformal - change formal constraints of the design</a></li> <li class="toctree-l3"><a class="reference internal" href="cmd/chparam.html">chparam - re-evaluate modules with new parameters</a></li> <li class="toctree-l3"><a class="reference internal" href="cmd/chtype.html">chtype - change type of cells in the design</a></li> <li class="toctree-l3"><a class="reference internal" href="cmd/clean.html">clean - remove unused cells and wires</a></li> <li class="toctree-l3"><a class="reference internal" href="cmd/clean_zerowidth.html">clean_zerowidth - clean zero-width connections from the design</a></li> <li class="toctree-l3"><a class="reference internal" href="cmd/clk2fflogic.html">clk2fflogic - convert clocked FFs to generic $ff cells</a></li> <li class="toctree-l3"><a class="reference internal" href="cmd/clkbufmap.html">clkbufmap - insert clock buffers on clock networks</a></li> <li class="toctree-l3"><a class="reference internal" href="cmd/connect.html">connect - create or remove connections</a></li> <li class="toctree-l3"><a class="reference internal" href="cmd/connect_rpc.html">connect_rpc - connect to RPC frontend</a></li> <li class="toctree-l3"><a class="reference internal" href="cmd/connwrappers.html">connwrappers - match width of input-output port pairs</a></li> <li class="toctree-l3"><a class="reference internal" href="cmd/coolrunner2_fixup.html">coolrunner2_fixup - insert necessary buffer cells for CoolRunner-II architecture</a></li> <li class="toctree-l3"><a class="reference internal" href="cmd/coolrunner2_sop.html">coolrunner2_sop - break $sop cells into ANDTERM/ORTERM cells</a></li> <li class="toctree-l3"><a class="reference internal" href="cmd/copy.html">copy - copy modules in the design</a></li> <li class="toctree-l3"><a class="reference internal" href="cmd/cover.html">cover - print code coverage counters</a></li> <li class="toctree-l3"><a class="reference internal" href="cmd/cutpoint.html">cutpoint - adds formal cut points to the design</a></li> <li class="toctree-l3"><a class="reference internal" href="cmd/debug.html">debug - run command with debug log messages enabled</a></li> <li class="toctree-l3"><a class="reference internal" href="cmd/delete.html">delete - delete objects in the design</a></li> <li class="toctree-l3"><a class="reference internal" href="cmd/deminout.html">deminout - demote inout ports to input or output</a></li> <li class="toctree-l3"><a class="reference internal" href="cmd/demuxmap.html">demuxmap - transform $demux cells to $eq + $mux cells</a></li> <li class="toctree-l3"><a class="reference internal" href="cmd/design.html">design - save, restore and reset current design</a></li> <li class="toctree-l3"><a class="reference internal" href="cmd/dffinit.html">dffinit - set INIT param on FF cells</a></li> <li class="toctree-l3"><a class="reference internal" href="cmd/dfflegalize.html">dfflegalize - convert FFs to types supported by the target</a></li> <li class="toctree-l3"><a class="reference internal" href="cmd/dfflibmap.html">dfflibmap - technology mapping of flip-flops</a></li> <li class="toctree-l3"><a class="reference internal" href="cmd/dffunmap.html">dffunmap - unmap clock enable and synchronous reset from FFs</a></li> <li class="toctree-l3"><a class="reference internal" href="cmd/dft_tag.html">dft_tag - create tagging logic for data flow tracking</a></li> <li class="toctree-l3"><a class="reference internal" href="cmd/dump.html">dump - print parts of the design in RTLIL format</a></li> <li class="toctree-l3"><a class="reference internal" href="cmd/echo.html">echo - turning echoing back of commands on and off</a></li> <li class="toctree-l3"><a class="reference internal" href="cmd/edgetypes.html">edgetypes - list all types of edges in selection</a></li> <li class="toctree-l3"><a class="reference internal" href="cmd/efinix_fixcarry.html">efinix_fixcarry - Efinix: fix carry chain</a></li> <li class="toctree-l3"><a class="reference internal" href="cmd/equiv_add.html">equiv_add - add a $equiv cell</a></li> <li class="toctree-l3"><a class="reference internal" href="cmd/equiv_induct.html">equiv_induct - proving $equiv cells using temporal induction</a></li> <li class="toctree-l3"><a class="reference internal" href="cmd/equiv_make.html">equiv_make - prepare a circuit for equivalence checking</a></li> <li class="toctree-l3"><a class="reference internal" href="cmd/equiv_mark.html">equiv_mark - mark equivalence checking regions</a></li> <li class="toctree-l3"><a class="reference internal" href="cmd/equiv_miter.html">equiv_miter - extract miter from equiv circuit</a></li> <li class="toctree-l3"><a class="reference internal" href="cmd/equiv_opt.html">equiv_opt - prove equivalence for optimized circuit</a></li> <li class="toctree-l3"><a class="reference internal" href="cmd/equiv_purge.html">equiv_purge - purge equivalence checking module</a></li> <li class="toctree-l3"><a class="reference internal" href="cmd/equiv_remove.html">equiv_remove - remove $equiv cells</a></li> <li class="toctree-l3"><a class="reference internal" href="cmd/equiv_simple.html">equiv_simple - try proving simple $equiv instances</a></li> <li class="toctree-l3"><a class="reference internal" href="cmd/equiv_status.html">equiv_status - print status of equivalent checking module</a></li> <li class="toctree-l3"><a class="reference internal" href="cmd/equiv_struct.html">equiv_struct - structural equivalence checking</a></li> <li class="toctree-l3"><a class="reference internal" href="cmd/eval.html">eval - evaluate the circuit given an input</a></li> <li class="toctree-l3"><a class="reference internal" href="cmd/exec.html">exec - execute commands in the operating system shell</a></li> <li class="toctree-l3"><a class="reference internal" href="cmd/expose.html">expose - convert internal signals to module ports</a></li> <li class="toctree-l3"><a class="reference internal" href="cmd/extract.html">extract - find subcircuits and replace them with cells</a></li> <li class="toctree-l3"><a class="reference internal" href="cmd/extract_counter.html">extract_counter - Extract GreenPak4 counter cells</a></li> <li class="toctree-l3"><a class="reference internal" href="cmd/extract_fa.html">extract_fa - find and extract full/half adders</a></li> <li class="toctree-l3"><a class="reference internal" href="cmd/extract_reduce.html">extract_reduce - converts gate chains into $reduce_* cells</a></li> <li class="toctree-l3"><a class="reference internal" href="cmd/extractinv.html">extractinv - extract explicit inverter cells for invertible cell pins</a></li> <li class="toctree-l3"><a class="reference internal" href="cmd/flatten.html">flatten - flatten design</a></li> <li class="toctree-l3"><a class="reference internal" href="cmd/flowmap.html">flowmap - pack LUTs with FlowMap</a></li> <li class="toctree-l3"><a class="reference internal" href="cmd/fmcombine.html">fmcombine - combine two instances of a cell into one</a></li> <li class="toctree-l3"><a class="reference internal" href="cmd/fminit.html">fminit - set init values/sequences for formal</a></li> <li class="toctree-l3"><a class="reference internal" href="cmd/formalff.html">formalff - prepare FFs for formal</a></li> <li class="toctree-l3"><a class="reference internal" href="cmd/freduce.html">freduce - perform functional reduction</a></li> <li class="toctree-l3"><a class="reference internal" href="cmd/fsm.html">fsm - extract and optimize finite state machines</a></li> <li class="toctree-l3"><a class="reference internal" href="cmd/fsm_detect.html">fsm_detect - finding FSMs in design</a></li> <li class="toctree-l3"><a class="reference internal" href="cmd/fsm_expand.html">fsm_expand - expand FSM cells by merging logic into it</a></li> <li class="toctree-l3"><a class="reference internal" href="cmd/fsm_export.html">fsm_export - exporting FSMs to KISS2 files</a></li> <li class="toctree-l3"><a class="reference internal" href="cmd/fsm_extract.html">fsm_extract - extracting FSMs in design</a></li> <li class="toctree-l3"><a class="reference internal" href="cmd/fsm_info.html">fsm_info - print information on finite state machines</a></li> <li class="toctree-l3"><a class="reference internal" href="cmd/fsm_map.html">fsm_map - mapping FSMs to basic logic</a></li> <li class="toctree-l3"><a class="reference internal" href="cmd/fsm_opt.html">fsm_opt - optimize finite state machines</a></li> <li class="toctree-l3"><a class="reference internal" href="cmd/fsm_recode.html">fsm_recode - recoding finite state machines</a></li> <li class="toctree-l3"><a class="reference internal" href="cmd/fst2tb.html">fst2tb - generate testbench out of fst file</a></li> <li class="toctree-l3"><a class="reference internal" href="cmd/future.html">future - resolve future sampled value functions</a></li> <li class="toctree-l3"><a class="reference internal" href="cmd/gatemate_foldinv.html">gatemate_foldinv - fold inverters into Gatemate LUT trees</a></li> <li class="toctree-l3"><a class="reference internal" href="cmd/glift.html">glift - create GLIFT models and optimization problems</a></li> <li class="toctree-l3"><a class="reference internal" href="cmd/greenpak4_dffinv.html">greenpak4_dffinv - merge greenpak4 inverters and DFF/latches</a></li> <li class="toctree-l3"><a class="reference internal" href="cmd/help.html">help - display help messages</a></li> <li class="toctree-l3"><a class="reference internal" href="cmd/hierarchy.html">hierarchy - check, expand and clean up design hierarchy</a></li> <li class="toctree-l3"><a class="reference internal" href="cmd/hilomap.html">hilomap - technology mapping of constant hi- and/or lo-drivers</a></li> <li class="toctree-l3"><a class="reference internal" href="cmd/history.html">history - show last interactive commands</a></li> <li class="toctree-l3"><a class="reference internal" href="cmd/ice40_braminit.html">ice40_braminit - iCE40: perform SB_RAM40_4K initialization from file</a></li> <li class="toctree-l3"><a class="reference internal" href="cmd/ice40_dsp.html">ice40_dsp - iCE40: map multipliers</a></li> <li class="toctree-l3"><a class="reference internal" href="cmd/ice40_opt.html">ice40_opt - iCE40: perform simple optimizations</a></li> <li class="toctree-l3"><a class="reference internal" href="cmd/ice40_wrapcarry.html">ice40_wrapcarry - iCE40: wrap carries</a></li> <li class="toctree-l3"><a class="reference internal" href="cmd/insbuf.html">insbuf - insert buffer cells for connected wires</a></li> <li class="toctree-l3"><a class="reference internal" href="cmd/internal_stats.html">internal_stats - print internal statistics</a></li> <li class="toctree-l3"><a class="reference internal" href="cmd/iopadmap.html">iopadmap - technology mapping of i/o pads (or buffers)</a></li> <li class="toctree-l3"><a class="reference internal" href="cmd/jny.html">jny - write design and metadata</a></li> <li class="toctree-l3"><a class="reference internal" href="cmd/json.html">json - write design in JSON format</a></li> <li class="toctree-l3"><a class="reference internal" href="cmd/keep_hierarchy.html">keep_hierarchy - add the keep_hierarchy attribute</a></li> <li class="toctree-l3"><a class="reference internal" href="cmd/lattice_gsr.html">lattice_gsr - Lattice: handle GSR</a></li> <li class="toctree-l3"><a class="reference internal" href="cmd/license.html">license - print license terms</a></li> <li class="toctree-l3"><a class="reference internal" href="cmd/log.html">log - print text and log files</a></li> <li class="toctree-l3"><a class="reference internal" href="cmd/logger.html">logger - set logger properties</a></li> <li class="toctree-l3"><a class="reference internal" href="cmd/ls.html">ls - list modules or objects in modules</a></li> <li class="toctree-l3"><a class="reference internal" href="cmd/ltp.html">ltp - print longest topological path</a></li> <li class="toctree-l3"><a class="reference internal" href="cmd/lut2mux.html">lut2mux - convert $lut to $_MUX_</a></li> <li class="toctree-l3"><a class="reference internal" href="cmd/maccmap.html">maccmap - mapping macc cells</a></li> <li class="toctree-l3"><a class="reference internal" href="cmd/memory.html">memory - translate memories to basic cells</a></li> <li class="toctree-l3"><a class="reference internal" href="cmd/memory_bmux2rom.html">memory_bmux2rom - convert muxes to ROMs</a></li> <li class="toctree-l3"><a class="reference internal" href="cmd/memory_bram.html">memory_bram - map memories to block rams</a></li> <li class="toctree-l3"><a class="reference internal" href="cmd/memory_collect.html">memory_collect - creating multi-port memory cells</a></li> <li class="toctree-l3"><a class="reference internal" href="cmd/memory_dff.html">memory_dff - merge input/output DFFs into memory read ports</a></li> <li class="toctree-l3"><a class="reference internal" href="cmd/memory_libmap.html">memory_libmap - map memories to cells</a></li> <li class="toctree-l3"><a class="reference internal" href="cmd/memory_map.html">memory_map - translate multiport memories to basic cells</a></li> <li class="toctree-l3"><a class="reference internal" href="cmd/memory_memx.html">memory_memx - emulate vlog sim behavior for mem ports</a></li> <li class="toctree-l3"><a class="reference internal" href="cmd/memory_narrow.html">memory_narrow - split up wide memory ports</a></li> <li class="toctree-l3"><a class="reference internal" href="cmd/memory_nordff.html">memory_nordff - extract read port FFs from memories</a></li> <li class="toctree-l3"><a class="reference internal" href="cmd/memory_share.html">memory_share - consolidate memory ports</a></li> <li class="toctree-l3"><a class="reference internal" href="cmd/memory_unpack.html">memory_unpack - unpack multi-port memory cells</a></li> <li class="toctree-l3"><a class="reference internal" href="cmd/microchip_dffopt.html">microchip_dffopt - MICROCHIP: optimize FF control signal usage</a></li> <li class="toctree-l3"><a class="reference internal" href="cmd/microchip_dsp.html">microchip_dsp - MICROCHIP: pack resources into DSPs</a></li> <li class="toctree-l3"><a class="reference internal" href="cmd/miter.html">miter - automatically create a miter circuit</a></li> <li class="toctree-l3"><a class="reference internal" href="cmd/mutate.html">mutate - generate or apply design mutations</a></li> <li class="toctree-l3"><a class="reference internal" href="cmd/muxcover.html">muxcover - cover trees of MUX cells with wider MUXes</a></li> <li class="toctree-l3"><a class="reference internal" href="cmd/muxpack.html">muxpack - $mux/$pmux cascades to $pmux</a></li> <li class="toctree-l3"><a class="reference internal" href="cmd/nlutmap.html">nlutmap - map to LUTs of different sizes</a></li> <li class="toctree-l3"><a class="reference internal" href="cmd/nx_carry.html">nx_carry - NanoXplore: create carry cells</a></li> <li class="toctree-l3"><a class="reference internal" href="cmd/onehot.html">onehot - optimize $eq cells for onehot signals</a></li> <li class="toctree-l3"><a class="reference internal" href="cmd/opt.html">opt - perform simple optimizations</a></li> <li class="toctree-l3"><a class="reference internal" href="cmd/opt_clean.html">opt_clean - remove unused cells and wires</a></li> <li class="toctree-l3"><a class="reference internal" href="cmd/opt_demorgan.html">opt_demorgan - Optimize reductions with DeMorgan equivalents</a></li> <li class="toctree-l3"><a class="reference internal" href="cmd/opt_dff.html">opt_dff - perform DFF optimizations</a></li> <li class="toctree-l3"><a class="reference internal" href="cmd/opt_expr.html">opt_expr - perform const folding and simple expression rewriting</a></li> <li class="toctree-l3"><a class="reference internal" href="cmd/opt_ffinv.html">opt_ffinv - push inverters through FFs</a></li> <li class="toctree-l3"><a class="reference internal" href="cmd/opt_lut.html">opt_lut - optimize LUT cells</a></li> <li class="toctree-l3"><a class="reference internal" href="cmd/opt_lut_ins.html">opt_lut_ins - discard unused LUT inputs</a></li> <li class="toctree-l3"><a class="reference internal" href="cmd/opt_mem.html">opt_mem - optimize memories</a></li> <li class="toctree-l3"><a class="reference internal" href="cmd/opt_mem_feedback.html">opt_mem_feedback - convert memory read-to-write port feedback paths to write enables</a></li> <li class="toctree-l3"><a class="reference internal" href="cmd/opt_mem_priority.html">opt_mem_priority - remove priority relations between write ports that can never collide</a></li> <li class="toctree-l3"><a class="reference internal" href="cmd/opt_mem_widen.html">opt_mem_widen - optimize memories where all ports are wide</a></li> <li class="toctree-l3"><a class="reference internal" href="cmd/opt_merge.html">opt_merge - consolidate identical cells</a></li> <li class="toctree-l3"><a class="reference internal" href="cmd/opt_muxtree.html">opt_muxtree - eliminate dead trees in multiplexer trees</a></li> <li class="toctree-l3"><a class="reference internal" href="cmd/opt_reduce.html">opt_reduce - simplify large MUXes and AND/OR gates</a></li> <li class="toctree-l3"><a class="reference internal" href="cmd/opt_share.html">opt_share - merge mutually exclusive cells of the same type that share an input signal</a></li> <li class="toctree-l3"><a class="reference internal" href="cmd/paramap.html">paramap - renaming cell parameters</a></li> <li class="toctree-l3"><a class="reference internal" href="cmd/peepopt.html">peepopt - collection of peephole optimizers</a></li> <li class="toctree-l3"><a class="reference internal" href="cmd/plugin.html">plugin - load and list loaded plugins</a></li> <li class="toctree-l3"><a class="reference internal" href="cmd/pmux2shiftx.html">pmux2shiftx - transform $pmux cells to $shiftx cells</a></li> <li class="toctree-l3"><a class="reference internal" href="cmd/pmuxtree.html">pmuxtree - transform $pmux cells to trees of $mux cells</a></li> <li class="toctree-l3"><a class="reference internal" href="cmd/portlist.html">portlist - list (top-level) ports</a></li> <li class="toctree-l3"><a class="reference internal" href="cmd/prep.html">prep - generic synthesis script</a></li> <li class="toctree-l3"><a class="reference internal" href="cmd/printattrs.html">printattrs - print attributes of selected objects</a></li> <li class="toctree-l3"><a class="reference internal" href="cmd/proc.html">proc - translate processes to netlists</a></li> <li class="toctree-l3"><a class="reference internal" href="cmd/proc_arst.html">proc_arst - detect asynchronous resets</a></li> <li class="toctree-l3"><a class="reference internal" href="cmd/proc_clean.html">proc_clean - remove empty parts of processes</a></li> <li class="toctree-l3"><a class="reference internal" href="cmd/proc_dff.html">proc_dff - extract flip-flops from processes</a></li> <li class="toctree-l3"><a class="reference internal" href="cmd/proc_dlatch.html">proc_dlatch - extract latches from processes</a></li> <li class="toctree-l3"><a class="reference internal" href="cmd/proc_init.html">proc_init - convert initial block to init attributes</a></li> <li class="toctree-l3"><a class="reference internal" href="cmd/proc_memwr.html">proc_memwr - extract memory writes from processes</a></li> <li class="toctree-l3"><a class="reference internal" href="cmd/proc_mux.html">proc_mux - convert decision trees to multiplexers</a></li> <li class="toctree-l3"><a class="reference internal" href="cmd/proc_prune.html">proc_prune - remove redundant assignments</a></li> <li class="toctree-l3"><a class="reference internal" href="cmd/proc_rmdead.html">proc_rmdead - eliminate dead trees in decision trees</a></li> <li class="toctree-l3"><a class="reference internal" href="cmd/proc_rom.html">proc_rom - convert switches to ROMs</a></li> <li class="toctree-l3"><a class="reference internal" href="cmd/qbfsat.html">qbfsat - solve a 2QBF-SAT problem in the circuit</a></li> <li class="toctree-l3"><a class="reference internal" href="cmd/ql_bram_merge.html">ql_bram_merge - Infers QuickLogic k6n10f BRAM pairs that can operate independently</a></li> <li class="toctree-l3"><a class="reference internal" href="cmd/ql_bram_types.html">ql_bram_types - Change TDP36K type to subtypes</a></li> <li class="toctree-l3"><a class="reference internal" href="cmd/ql_dsp_io_regs.html">ql_dsp_io_regs - change types of QL_DSP2 depending on configuration</a></li> <li class="toctree-l3"><a class="reference internal" href="cmd/ql_dsp_macc.html">ql_dsp_macc - infer QuickLogic multiplier-accumulator DSP cells</a></li> <li class="toctree-l3"><a class="reference internal" href="cmd/ql_dsp_simd.html">ql_dsp_simd - merge QuickLogic K6N10f DSP pairs to operate in SIMD mode</a></li> <li class="toctree-l3"><a class="reference internal" href="cmd/qwp.html">qwp - quadratic wirelength placer</a></li> <li class="toctree-l3"><a class="reference internal" href="cmd/read.html">read - load HDL designs</a></li> <li class="toctree-l3"><a class="reference internal" href="cmd/read_aiger.html">read_aiger - read AIGER file</a></li> <li class="toctree-l3"><a class="reference internal" href="cmd/read_blif.html">read_blif - read BLIF file</a></li> <li class="toctree-l3"><a class="reference internal" href="cmd/read_ilang.html">read_ilang - (deprecated) alias of read_rtlil</a></li> <li class="toctree-l3"><a class="reference internal" href="cmd/read_json.html">read_json - read JSON file</a></li> <li class="toctree-l3"><a class="reference internal" href="cmd/read_liberty.html">read_liberty - read cells from liberty file</a></li> <li class="toctree-l3"><a class="reference internal" href="cmd/read_rtlil.html">read_rtlil - read modules from RTLIL file</a></li> <li class="toctree-l3"><a class="reference internal" href="cmd/read_verilog.html">read_verilog - read modules from Verilog file</a></li> <li class="toctree-l3"><a class="reference internal" href="cmd/recover_names.html">recover_names - Execute a lossy mapping command and recover original netnames</a></li> <li class="toctree-l3"><a class="reference internal" href="cmd/rename.html">rename - rename object in the design</a></li> <li class="toctree-l3"><a class="reference internal" href="cmd/rmports.html">rmports - remove module ports with no connections</a></li> <li class="toctree-l3"><a class="reference internal" href="cmd/sat.html">sat - solve a SAT problem in the circuit</a></li> <li class="toctree-l3"><a class="reference internal" href="cmd/scatter.html">scatter - add additional intermediate nets</a></li> <li class="toctree-l3"><a class="reference internal" href="cmd/scc.html">scc - detect strongly connected components (logic loops)</a></li> <li class="toctree-l3"><a class="reference internal" href="cmd/scratchpad.html">scratchpad - get/set values in the scratchpad</a></li> <li class="toctree-l3"><a class="reference internal" href="cmd/script.html">script - execute commands from file or wire</a></li> <li class="toctree-l3"><a class="reference internal" href="cmd/select.html">select - modify and view the list of selected objects</a></li> <li class="toctree-l3"><a class="reference internal" href="cmd/setattr.html">setattr - set/unset attributes on objects</a></li> <li class="toctree-l3"><a class="reference internal" href="cmd/setparam.html">setparam - set/unset parameters on objects</a></li> <li class="toctree-l3"><a class="reference internal" href="cmd/setundef.html">setundef - replace undef values with defined constants</a></li> <li class="toctree-l3"><a class="reference internal" href="cmd/share.html">share - perform sat-based resource sharing</a></li> <li class="toctree-l3"><a class="reference internal" href="cmd/shell.html">shell - enter interactive command mode</a></li> <li class="toctree-l3"><a class="reference internal" href="cmd/show.html">show - generate schematics using graphviz</a></li> <li class="toctree-l3"><a class="reference internal" href="cmd/shregmap.html">shregmap - map shift registers</a></li> <li class="toctree-l3"><a class="reference internal" href="cmd/sim.html">sim - simulate the circuit</a></li> <li class="toctree-l3"><a class="reference internal" href="cmd/simplemap.html">simplemap - mapping simple coarse-grain cells</a></li> <li class="toctree-l3"><a class="reference internal" href="cmd/splice.html">splice - create explicit splicing cells</a></li> <li class="toctree-l3"><a class="reference internal" href="cmd/splitcells.html">splitcells - split up multi-bit cells</a></li> <li class="toctree-l3"><a class="reference internal" href="cmd/splitnets.html">splitnets - split up multi-bit nets</a></li> <li class="toctree-l3"><a class="reference internal" href="cmd/sta.html">sta - perform static timing analysis</a></li> <li class="toctree-l3"><a class="reference internal" href="cmd/stat.html">stat - print some statistics</a></li> <li class="toctree-l3"><a class="reference internal" href="cmd/submod.html">submod - moving part of a module to a new submodule</a></li> <li class="toctree-l3"><a class="reference internal" href="cmd/supercover.html">supercover - add hi/lo cover cells for each wire bit</a></li> <li class="toctree-l3"><a class="reference internal" href="cmd/synth.html">synth - generic synthesis script</a></li> <li class="toctree-l3"><a class="reference internal" href="cmd/synth_achronix.html">synth_achronix - synthesis for Achronix Speedster22i FPGAs.</a></li> <li class="toctree-l3"><a class="reference internal" href="cmd/synth_anlogic.html">synth_anlogic - synthesis for Anlogic FPGAs</a></li> <li class="toctree-l3"><a class="reference internal" href="cmd/synth_coolrunner2.html">synth_coolrunner2 - synthesis for Xilinx Coolrunner-II CPLDs</a></li> <li class="toctree-l3"><a class="reference internal" href="cmd/synth_easic.html">synth_easic - synthesis for eASIC platform</a></li> <li class="toctree-l3"><a class="reference internal" href="cmd/synth_ecp5.html">synth_ecp5 - synthesis for ECP5 FPGAs</a></li> <li class="toctree-l3"><a class="reference internal" href="cmd/synth_efinix.html">synth_efinix - synthesis for Efinix FPGAs</a></li> <li class="toctree-l3"><a class="reference internal" href="cmd/synth_fabulous.html">synth_fabulous - FABulous synthesis script</a></li> <li class="toctree-l3"><a class="reference internal" href="cmd/synth_gatemate.html">synth_gatemate - synthesis for Cologne Chip GateMate FPGAs</a></li> <li class="toctree-l3"><a class="reference internal" href="cmd/synth_gowin.html">synth_gowin - synthesis for Gowin FPGAs</a></li> <li class="toctree-l3"><a class="reference internal" href="cmd/synth_greenpak4.html">synth_greenpak4 - synthesis for GreenPAK4 FPGAs</a></li> <li class="toctree-l3"><a class="reference internal" href="cmd/synth_ice40.html">synth_ice40 - synthesis for iCE40 FPGAs</a></li> <li class="toctree-l3"><a class="reference internal" href="cmd/synth_intel.html">synth_intel - synthesis for Intel (Altera) FPGAs.</a></li> <li class="toctree-l3"><a class="reference internal" href="cmd/synth_intel_alm.html">synth_intel_alm - synthesis for ALM-based Intel (Altera) FPGAs.</a></li> <li class="toctree-l3"><a class="reference internal" href="cmd/synth_lattice.html">synth_lattice - synthesis for Lattice FPGAs</a></li> <li class="toctree-l3"><a class="reference internal" href="cmd/synth_microchip.html">synth_microchip - synthesis for Microchip FPGAs</a></li> <li class="toctree-l3"><a class="reference internal" href="cmd/synth_nanoxplore.html">synth_nanoxplore - synthesis for NanoXplore FPGAs</a></li> <li class="toctree-l3"><a class="reference internal" href="cmd/synth_nexus.html">synth_nexus - synthesis for Lattice Nexus FPGAs</a></li> <li class="toctree-l3"><a class="reference internal" href="cmd/synth_quicklogic.html">synth_quicklogic - Synthesis for QuickLogic FPGAs</a></li> <li class="toctree-l3"><a class="reference internal" href="cmd/synth_sf2.html">synth_sf2 - synthesis for SmartFusion2 and IGLOO2 FPGAs</a></li> <li class="toctree-l3"><a class="reference internal" href="cmd/synth_xilinx.html">synth_xilinx - synthesis for Xilinx FPGAs</a></li> <li class="toctree-l3"><a class="reference internal" href="cmd/synthprop.html">synthprop - synthesize SVA properties</a></li> <li class="toctree-l3"><a class="reference internal" href="cmd/tcl.html">tcl - execute a TCL script file</a></li> <li class="toctree-l3"><a class="reference internal" href="cmd/techmap.html">techmap - generic technology mapper</a></li> <li class="toctree-l3"><a class="reference internal" href="cmd/tee.html">tee - redirect command output to file</a></li> <li class="toctree-l3"><a class="reference internal" href="cmd/test_abcloop.html">test_abcloop - automatically test handling of loops in abc command</a></li> <li class="toctree-l3"><a class="reference internal" href="cmd/test_autotb.html">test_autotb - generate simple test benches</a></li> <li class="toctree-l3"><a class="reference internal" href="cmd/test_cell.html">test_cell - automatically test the implementation of a cell type</a></li> <li class="toctree-l3"><a class="reference internal" href="cmd/test_pmgen.html">test_pmgen - test pass for pmgen</a></li> <li class="toctree-l3"><a class="reference internal" href="cmd/torder.html">torder - print cells in topological order</a></li> <li class="toctree-l3"><a class="reference internal" href="cmd/trace.html">trace - redirect command output to file</a></li> <li class="toctree-l3"><a class="reference internal" href="cmd/tribuf.html">tribuf - infer tri-state buffers</a></li> <li class="toctree-l3"><a class="reference internal" href="cmd/uniquify.html">uniquify - create unique copies of modules</a></li> <li class="toctree-l3"><a class="reference internal" href="cmd/verific.html">verific - load Verilog and VHDL designs using Verific</a></li> <li class="toctree-l3"><a class="reference internal" href="cmd/verilog_defaults.html">verilog_defaults - set default options for read_verilog</a></li> <li class="toctree-l3"><a class="reference internal" href="cmd/verilog_defines.html">verilog_defines - define and undefine verilog defines</a></li> <li class="toctree-l3"><a class="reference internal" href="cmd/viz.html">viz - visualize data flow graph</a></li> <li class="toctree-l3"><a class="reference internal" href="cmd/wbflip.html">wbflip - flip the whitebox attribute</a></li> <li class="toctree-l3"><a class="reference internal" href="cmd/wreduce.html">wreduce - reduce the word size of operations if possible</a></li> <li class="toctree-l3"><a class="reference internal" href="cmd/write_aiger.html">write_aiger - write design to AIGER file</a></li> <li class="toctree-l3"><a class="reference internal" href="cmd/write_blif.html">write_blif - write design to BLIF file</a></li> <li class="toctree-l3"><a class="reference internal" href="cmd/write_btor.html">write_btor - write design to BTOR file</a></li> <li class="toctree-l3"><a class="reference internal" href="cmd/write_cxxrtl.html">write_cxxrtl - convert design to C++ RTL simulation</a></li> <li class="toctree-l3"><a class="reference internal" href="cmd/write_edif.html">write_edif - write design to EDIF netlist file</a></li> <li class="toctree-l3"><a class="reference internal" href="cmd/write_file.html">write_file - write a text to a file</a></li> <li class="toctree-l3"><a class="reference internal" href="cmd/write_firrtl.html">write_firrtl - write design to a FIRRTL file</a></li> <li class="toctree-l3"><a class="reference internal" href="cmd/write_ilang.html">write_ilang - (deprecated) alias of write_rtlil</a></li> <li class="toctree-l3"><a class="reference internal" href="cmd/write_intersynth.html">write_intersynth - write design to InterSynth netlist file</a></li> <li class="toctree-l3"><a class="reference internal" href="cmd/write_jny.html">write_jny - generate design metadata</a></li> <li class="toctree-l3"><a class="reference internal" href="cmd/write_json.html">write_json - write design to a JSON file</a></li> <li class="toctree-l3"><a class="reference internal" href="cmd/write_rtlil.html">write_rtlil - write design to RTLIL file</a></li> <li class="toctree-l3"><a class="reference internal" href="cmd/write_simplec.html">write_simplec - convert design to simple C code</a></li> <li class="toctree-l3"><a class="reference internal" href="cmd/write_smt2.html">write_smt2 - write design to SMT-LIBv2 file</a></li> <li class="toctree-l3"><a class="reference internal" href="cmd/write_smv.html">write_smv - write design to SMV file</a></li> <li class="toctree-l3"><a class="reference internal" href="cmd/write_spice.html">write_spice - write design to SPICE netlist file</a></li> <li class="toctree-l3"><a class="reference internal" href="cmd/write_table.html">write_table - write design as connectivity table</a></li> <li class="toctree-l3"><a class="reference internal" href="cmd/write_verilog.html">write_verilog - write design to Verilog file</a></li> <li class="toctree-l3"><a class="reference internal" href="cmd/write_xaiger.html">write_xaiger - write design to XAIGER file</a></li> <li class="toctree-l3"><a class="reference internal" href="cmd/xilinx_dffopt.html">xilinx_dffopt - Xilinx: optimize FF control signal usage</a></li> <li class="toctree-l3"><a class="reference internal" href="cmd/xilinx_dsp.html">xilinx_dsp - Xilinx: pack resources into DSPs</a></li> <li class="toctree-l3"><a class="reference internal" href="cmd/xilinx_srl.html">xilinx_srl - Xilinx shift register extraction</a></li> <li class="toctree-l3"><a class="reference internal" href="cmd/xprop.html">xprop - formal x propagation</a></li> <li class="toctree-l3"><a class="reference internal" href="cmd/zinit.html">zinit - add inverters so all FF are zero-initialized</a></li> </ul> </li> </ul> </li> </ul>  </div>  <div   id="furo-sidebar-ad-placement"   class="flat"   data-ea-publisher="readthedocs"   data-ea-type="readthedocs-sidebar"   data-ea-manual="true" ></div> </div>  <div id="furo-readthedocs-versions" class="rst-versions" data-toggle="rst-versions" role="note" aria-label="Versions" tabindex="0">   <span class="rst-current-version" data-toggle="rst-current-version">     <span class="fa fa-book">&nbsp;</span>     v: latest   </span>   <div class="rst-other-versions">     <dl>       <dt>Versions</dt>                <dd><a href="/en/latest/">latest</a></dd>                <dd><a href="/en/stable/">stable</a></dd>                <dd><a href="/en/0.45/">0.45</a></dd>                <dd><a href="/en/0.44/">0.44</a></dd>                <dd><a href="/en/0.43/">0.43</a></dd>                <dd><a href="/en/0.42/">0.42</a></dd>                <dd><a href="/en/0.41/">0.41</a></dd>                <dd><a href="/en/0.40/">0.40</a></dd>                <dd><a href="/en/0.39/">0.39</a></dd>                <dd><a href="/en/0.38/">0.38</a></dd>                <dd><a href="/en/0.37/">0.37</a></dd>                <dd><a href="/en/0.36/">0.36</a></dd>                <dd><a href="/en/0.35/">0.35</a></dd>                <dd><a href="/en/0.34/">0.34</a></dd>                <dd><a href="/en/0.33/">0.33</a></dd>                <dd><a href="/en/0.32/">0.32</a></dd>                <dd><a href="/en/0.31/">0.31</a></dd>                <dd><a href="/en/0.30/">0.30</a></dd>                <dd><a href="/en/0.29/">0.29</a></dd>                <dd><a href="/en/0.28/">0.28</a></dd>                <dd><a href="/en/0.27/">0.27</a></dd>                <dd><a href="/en/0.26/">0.26</a></dd>                <dd><a href="/en/0.25/">0.25</a></dd>                <dd><a href="/en/0.24/">0.24</a></dd>                <dd><a href="/en/docs-previewtest/">docs-previewtest</a></dd>                <dd><a href="/en/docs-preview-cellhelp/">docs-preview-cellhelp</a></dd>            </dl>     <dl>       <dt>Downloads</dt>                <dd><a href="//yosyshq.readthedocs.io/_/downloads/yosys/en/latest/pdf/">pdf</a></dd>            </dl>     <dl>              <dt>On Read the Docs</dt>         <dd>           <a href="//readthedocs.org/projects/yosys/?fromdocs=yosys">Project Home</a>         </dd>         <dd>           <a href="//readthedocs.org/builds/yosys/?fromdocs=yosys">Builds</a>         </dd>     </dl>   </div> </div>        </div>            </div>   </aside>   <div class="main">     <div class="content">       <div class="article-container">         <a href="#" class="back-to-top muted-link">           <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">             <path d="M13 20h-2V8l-5.5 5.5-1.42-1.42L12 4.16l7.92 7.92-1.42 1.42L13 8v12z"></path>           </svg>           <span>Back to top</span>         </a>         <div class="content-icon-container">           <div class="theme-toggle-container theme-toggle-content">             <button class="theme-toggle">               <div class="visually-hidden">Toggle Light / Dark / Auto color theme</div>               <svg class="theme-icon-when-auto-light"><use href="#svg-sun-with-moon"></use></svg>               <svg class="theme-icon-when-auto-dark"><use href="#svg-moon-with-sun"></use></svg>               <svg class="theme-icon-when-dark"><use href="#svg-moon"></use></svg>               <svg class="theme-icon-when-light"><use href="#svg-sun"></use></svg>             </button>           </div>           <label class="toc-overlay-icon toc-content-icon no-toc" for="__toc">             <div class="visually-hidden">Toggle table of contents sidebar</div>             <i class="icon"><svg><use href="#svg-toc"></use></svg></i>           </label>         </div>         <article role="main" id="furo-main-content">            <section class="domainindex-section">   <h1>Command Reference</h1>   <div class="domainindex-jumpbox"><a href="#cap-Command"><strong>Command</strong></a></div> </section> <table class="domainindex-table">   <tr class="pcap">     <td></td><td>&#160;</td><td></td>   </tr>   <tr class="cap" id="cap-Command">     <td></td><td><strong>Command</strong></td><td></td>   </tr>   <tr>     <td></td>     <td>         <a href="cmd/abc.html#cmd-abc"><code class="xref">abc</code></a></td><td>     <em>use ABC for technology mapping</em></td>   </tr>   <tr>     <td></td>     <td>         <a href="cmd/abc9.html#cmd-abc9"><code class="xref">abc9</code></a></td><td>     <em>use ABC9 for technology mapping</em></td>   </tr>   <tr>     <td></td>     <td>         <a href="cmd/abc9_exe.html#cmd-abc9_exe"><code class="xref">abc9_exe</code></a></td><td>     <em>use ABC9 for technology mapping</em></td>   </tr>   <tr>     <td></td>     <td>         <a href="cmd/abc9_ops.html#cmd-abc9_ops"><code class="xref">abc9_ops</code></a></td><td>     <em>helper functions for ABC9</em></td>   </tr>   <tr>     <td></td>     <td>         <a href="cmd/add.html#cmd-add"><code class="xref">add</code></a></td><td>     <em>add objects to the design</em></td>   </tr>   <tr>     <td></td>     <td>         <a href="cmd/aigmap.html#cmd-aigmap"><code class="xref">aigmap</code></a></td><td>     <em>map logic to and-inverter-graph circuit</em></td>   </tr>   <tr>     <td></td>     <td>         <a href="cmd/alumacc.html#cmd-alumacc"><code class="xref">alumacc</code></a></td><td>     <em>extract ALU and MACC cells</em></td>   </tr>   <tr>     <td></td>     <td>         <a href="cmd/anlogic_eqn.html#cmd-anlogic_eqn"><code class="xref">anlogic_eqn</code></a></td><td>     <em>Anlogic: Calculate equations for luts</em></td>   </tr>   <tr>     <td></td>     <td>         <a href="cmd/anlogic_fixcarry.html#cmd-anlogic_fixcarry"><code class="xref">anlogic_fixcarry</code></a></td><td>     <em>Anlogic: fix carry chain</em></td>   </tr>   <tr>     <td></td>     <td>         <a href="cmd/assertpmux.html#cmd-assertpmux"><code class="xref">assertpmux</code></a></td><td>     <em>adds asserts for parallel muxes</em></td>   </tr>   <tr>     <td></td>     <td>         <a href="cmd/async2sync.html#cmd-async2sync"><code class="xref">async2sync</code></a></td><td>     <em>convert async FF inputs to sync circuits</em></td>   </tr>   <tr>     <td></td>     <td>         <a href="cmd/attrmap.html#cmd-attrmap"><code class="xref">attrmap</code></a></td><td>     <em>renaming attributes</em></td>   </tr>   <tr>     <td></td>     <td>         <a href="cmd/attrmvcp.html#cmd-attrmvcp"><code class="xref">attrmvcp</code></a></td><td>     <em>move or copy attributes from wires to driving cells</em></td>   </tr>   <tr>     <td></td>     <td>         <a href="cmd/autoname.html#cmd-autoname"><code class="xref">autoname</code></a></td><td>     <em>automatically assign names to objects</em></td>   </tr>   <tr>     <td></td>     <td>         <a href="cmd/blackbox.html#cmd-blackbox"><code class="xref">blackbox</code></a></td><td>     <em>convert modules into blackbox modules</em></td>   </tr>   <tr>     <td></td>     <td>         <a href="cmd/bmuxmap.html#cmd-bmuxmap"><code class="xref">bmuxmap</code></a></td><td>     <em>transform $bmux cells to trees of $mux cells</em></td>   </tr>   <tr>     <td></td>     <td>         <a href="cmd/booth.html#cmd-booth"><code class="xref">booth</code></a></td><td>     <em>map $mul cells to Booth multipliers</em></td>   </tr>   <tr>     <td></td>     <td>         <a href="cmd/box_derive.html#cmd-box_derive"><code class="xref">box_derive</code></a></td><td>     <em>derive box modules</em></td>   </tr>   <tr>     <td></td>     <td>         <a href="cmd/bugpoint.html#cmd-bugpoint"><code class="xref">bugpoint</code></a></td><td>     <em>minimize testcases</em></td>   </tr>   <tr>     <td></td>     <td>         <a href="cmd/bwmuxmap.html#cmd-bwmuxmap"><code class="xref">bwmuxmap</code></a></td><td>     <em>replace $bwmux cells with equivalent logic</em></td>   </tr>   <tr>     <td></td>     <td>         <a href="cmd/cd.html#cmd-cd"><code class="xref">cd</code></a></td><td>     <em>a shortcut for &#39;select -module &lt;name&gt;&#39;</em></td>   </tr>   <tr>     <td></td>     <td>         <a href="cmd/cellmatch.html#cmd-cellmatch"><code class="xref">cellmatch</code></a></td><td>     <em>match cells to their targets in cell library</em></td>   </tr>   <tr>     <td></td>     <td>         <a href="cmd/check.html#cmd-check"><code class="xref">check</code></a></td><td>     <em>check for obvious problems in the design</em></td>   </tr>   <tr>     <td></td>     <td>         <a href="cmd/chformal.html#cmd-chformal"><code class="xref">chformal</code></a></td><td>     <em>change formal constraints of the design</em></td>   </tr>   <tr>     <td></td>     <td>         <a href="cmd/chparam.html#cmd-chparam"><code class="xref">chparam</code></a></td><td>     <em>re-evaluate modules with new parameters</em></td>   </tr>   <tr>     <td></td>     <td>         <a href="cmd/chtype.html#cmd-chtype"><code class="xref">chtype</code></a></td><td>     <em>change type of cells in the design</em></td>   </tr>   <tr>     <td></td>     <td>         <a href="cmd/clean.html#cmd-clean"><code class="xref">clean</code></a></td><td>     <em>remove unused cells and wires</em></td>   </tr>   <tr>     <td></td>     <td>         <a href="cmd/clean_zerowidth.html#cmd-clean_zerowidth"><code class="xref">clean_zerowidth</code></a></td><td>     <em>clean zero-width connections from the design</em></td>   </tr>   <tr>     <td></td>     <td>         <a href="cmd/clk2fflogic.html#cmd-clk2fflogic"><code class="xref">clk2fflogic</code></a></td><td>     <em>convert clocked FFs to generic $ff cells</em></td>   </tr>   <tr>     <td></td>     <td>         <a href="cmd/clkbufmap.html#cmd-clkbufmap"><code class="xref">clkbufmap</code></a></td><td>     <em>insert clock buffers on clock networks</em></td>   </tr>   <tr>     <td></td>     <td>         <a href="cmd/connect.html#cmd-connect"><code class="xref">connect</code></a></td><td>     <em>create or remove connections</em></td>   </tr>   <tr>     <td></td>     <td>         <a href="cmd/connect_rpc.html#cmd-connect_rpc"><code class="xref">connect_rpc</code></a></td><td>     <em>connect to RPC frontend</em></td>   </tr>   <tr>     <td></td>     <td>         <a href="cmd/connwrappers.html#cmd-connwrappers"><code class="xref">connwrappers</code></a></td><td>     <em>match width of input-output port pairs</em></td>   </tr>   <tr>     <td></td>     <td>         <a href="cmd/coolrunner2_fixup.html#cmd-coolrunner2_fixup"><code class="xref">coolrunner2_fixup</code></a></td><td>     <em>insert necessary buffer cells for CoolRunner-II architecture</em></td>   </tr>   <tr>     <td></td>     <td>         <a href="cmd/coolrunner2_sop.html#cmd-coolrunner2_sop"><code class="xref">coolrunner2_sop</code></a></td><td>     <em>break $sop cells into ANDTERM/ORTERM cells</em></td>   </tr>   <tr>     <td></td>     <td>         <a href="cmd/copy.html#cmd-copy"><code class="xref">copy</code></a></td><td>     <em>copy modules in the design</em></td>   </tr>   <tr>     <td></td>     <td>         <a href="cmd/cover.html#cmd-cover"><code class="xref">cover</code></a></td><td>     <em>print code coverage counters</em></td>   </tr>   <tr>     <td></td>     <td>         <a href="cmd/cutpoint.html#cmd-cutpoint"><code class="xref">cutpoint</code></a></td><td>     <em>adds formal cut points to the design</em></td>   </tr>   <tr>     <td></td>     <td>         <a href="cmd/debug.html#cmd-debug"><code class="xref">debug</code></a></td><td>     <em>run command with debug log messages enabled</em></td>   </tr>   <tr>     <td></td>     <td>         <a href="cmd/delete.html#cmd-delete"><code class="xref">delete</code></a></td><td>     <em>delete objects in the design</em></td>   </tr>   <tr>     <td></td>     <td>         <a href="cmd/deminout.html#cmd-deminout"><code class="xref">deminout</code></a></td><td>     <em>demote inout ports to input or output</em></td>   </tr>   <tr>     <td></td>     <td>         <a href="cmd/demuxmap.html#cmd-demuxmap"><code class="xref">demuxmap</code></a></td><td>     <em>transform $demux cells to $eq + $mux cells</em></td>   </tr>   <tr>     <td></td>     <td>         <a href="cmd/design.html#cmd-design"><code class="xref">design</code></a></td><td>     <em>save, restore and reset current design</em></td>   </tr>   <tr>     <td></td>     <td>         <a href="cmd/dffinit.html#cmd-dffinit"><code class="xref">dffinit</code></a></td><td>     <em>set INIT param on FF cells</em></td>   </tr>   <tr>     <td></td>     <td>         <a href="cmd/dfflegalize.html#cmd-dfflegalize"><code class="xref">dfflegalize</code></a></td><td>     <em>convert FFs to types supported by the target</em></td>   </tr>   <tr>     <td></td>     <td>         <a href="cmd/dfflibmap.html#cmd-dfflibmap"><code class="xref">dfflibmap</code></a></td><td>     <em>technology mapping of flip-flops</em></td>   </tr>   <tr>     <td></td>     <td>         <a href="cmd/dffunmap.html#cmd-dffunmap"><code class="xref">dffunmap</code></a></td><td>     <em>unmap clock enable and synchronous reset from FFs</em></td>   </tr>   <tr>     <td></td>     <td>         <a href="cmd/dft_tag.html#cmd-dft_tag"><code class="xref">dft_tag</code></a></td><td>     <em>create tagging logic for data flow tracking</em></td>   </tr>   <tr>     <td></td>     <td>         <a href="cmd/dump.html#cmd-dump"><code class="xref">dump</code></a></td><td>     <em>print parts of the design in RTLIL format</em></td>   </tr>   <tr>     <td></td>     <td>         <a href="cmd/echo.html#cmd-echo"><code class="xref">echo</code></a></td><td>     <em>turning echoing back of commands on and off</em></td>   </tr>   <tr>     <td></td>     <td>         <a href="cmd/edgetypes.html#cmd-edgetypes"><code class="xref">edgetypes</code></a></td><td>     <em>list all types of edges in selection</em></td>   </tr>   <tr>     <td></td>     <td>         <a href="cmd/efinix_fixcarry.html#cmd-efinix_fixcarry"><code class="xref">efinix_fixcarry</code></a></td><td>     <em>Efinix: fix carry chain</em></td>   </tr>   <tr>     <td></td>     <td>         <a href="cmd/equiv_add.html#cmd-equiv_add"><code class="xref">equiv_add</code></a></td><td>     <em>add a $equiv cell</em></td>   </tr>   <tr>     <td></td>     <td>         <a href="cmd/equiv_induct.html#cmd-equiv_induct"><code class="xref">equiv_induct</code></a></td><td>     <em>proving $equiv cells using temporal induction</em></td>   </tr>   <tr>     <td></td>     <td>         <a href="cmd/equiv_make.html#cmd-equiv_make"><code class="xref">equiv_make</code></a></td><td>     <em>prepare a circuit for equivalence checking</em></td>   </tr>   <tr>     <td></td>     <td>         <a href="cmd/equiv_mark.html#cmd-equiv_mark"><code class="xref">equiv_mark</code></a></td><td>     <em>mark equivalence checking regions</em></td>   </tr>   <tr>     <td></td>     <td>         <a href="cmd/equiv_miter.html#cmd-equiv_miter"><code class="xref">equiv_miter</code></a></td><td>     <em>extract miter from equiv circuit</em></td>   </tr>   <tr>     <td></td>     <td>         <a href="cmd/equiv_opt.html#cmd-equiv_opt"><code class="xref">equiv_opt</code></a></td><td>     <em>prove equivalence for optimized circuit</em></td>   </tr>   <tr>     <td></td>     <td>         <a href="cmd/equiv_purge.html#cmd-equiv_purge"><code class="xref">equiv_purge</code></a></td><td>     <em>purge equivalence checking module</em></td>   </tr>   <tr>     <td></td>     <td>         <a href="cmd/equiv_remove.html#cmd-equiv_remove"><code class="xref">equiv_remove</code></a></td><td>     <em>remove $equiv cells</em></td>   </tr>   <tr>     <td></td>     <td>         <a href="cmd/equiv_simple.html#cmd-equiv_simple"><code class="xref">equiv_simple</code></a></td><td>     <em>try proving simple $equiv instances</em></td>   </tr>   <tr>     <td></td>     <td>         <a href="cmd/equiv_status.html#cmd-equiv_status"><code class="xref">equiv_status</code></a></td><td>     <em>print status of equivalent checking module</em></td>   </tr>   <tr>     <td></td>     <td>         <a href="cmd/equiv_struct.html#cmd-equiv_struct"><code class="xref">equiv_struct</code></a></td><td>     <em>structural equivalence checking</em></td>   </tr>   <tr>     <td></td>     <td>         <a href="cmd/eval.html#cmd-eval"><code class="xref">eval</code></a></td><td>     <em>evaluate the circuit given an input</em></td>   </tr>   <tr>     <td></td>     <td>         <a href="cmd/exec.html#cmd-exec"><code class="xref">exec</code></a></td><td>     <em>execute commands in the operating system shell</em></td>   </tr>   <tr>     <td></td>     <td>         <a href="cmd/expose.html#cmd-expose"><code class="xref">expose</code></a></td><td>     <em>convert internal signals to module ports</em></td>   </tr>   <tr>     <td></td>     <td>         <a href="cmd/extract.html#cmd-extract"><code class="xref">extract</code></a></td><td>     <em>find subcircuits and replace them with cells</em></td>   </tr>   <tr>     <td></td>     <td>         <a href="cmd/extract_counter.html#cmd-extract_counter"><code class="xref">extract_counter</code></a></td><td>     <em>Extract GreenPak4 counter cells</em></td>   </tr>   <tr>     <td></td>     <td>         <a href="cmd/extract_fa.html#cmd-extract_fa"><code class="xref">extract_fa</code></a></td><td>     <em>find and extract full/half adders</em></td>   </tr>   <tr>     <td></td>     <td>         <a href="cmd/extract_reduce.html#cmd-extract_reduce"><code class="xref">extract_reduce</code></a></td><td>     <em>converts gate chains into $reduce_* cells</em></td>   </tr>   <tr>     <td></td>     <td>         <a href="cmd/extractinv.html#cmd-extractinv"><code class="xref">extractinv</code></a></td><td>     <em>extract explicit inverter cells for invertible cell pins</em></td>   </tr>   <tr>     <td></td>     <td>         <a href="cmd/flatten.html#cmd-flatten"><code class="xref">flatten</code></a></td><td>     <em>flatten design</em></td>   </tr>   <tr>     <td></td>     <td>         <a href="cmd/flowmap.html#cmd-flowmap"><code class="xref">flowmap</code></a></td><td>     <em>pack LUTs with FlowMap</em></td>   </tr>   <tr>     <td></td>     <td>         <a href="cmd/fmcombine.html#cmd-fmcombine"><code class="xref">fmcombine</code></a></td><td>     <em>combine two instances of a cell into one</em></td>   </tr>   <tr>     <td></td>     <td>         <a href="cmd/fminit.html#cmd-fminit"><code class="xref">fminit</code></a></td><td>     <em>set init values/sequences for formal</em></td>   </tr>   <tr>     <td></td>     <td>         <a href="cmd/formalff.html#cmd-formalff"><code class="xref">formalff</code></a></td><td>     <em>prepare FFs for formal</em></td>   </tr>   <tr>     <td></td>     <td>         <a href="cmd/freduce.html#cmd-freduce"><code class="xref">freduce</code></a></td><td>     <em>perform functional reduction</em></td>   </tr>   <tr>     <td></td>     <td>         <a href="cmd/fsm.html#cmd-fsm"><code class="xref">fsm</code></a></td><td>     <em>extract and optimize finite state machines</em></td>   </tr>   <tr>     <td></td>     <td>         <a href="cmd/fsm_detect.html#cmd-fsm_detect"><code class="xref">fsm_detect</code></a></td><td>     <em>finding FSMs in design</em></td>   </tr>   <tr>     <td></td>     <td>         <a href="cmd/fsm_expand.html#cmd-fsm_expand"><code class="xref">fsm_expand</code></a></td><td>     <em>expand FSM cells by merging logic into it</em></td>   </tr>   <tr>     <td></td>     <td>         <a href="cmd/fsm_export.html#cmd-fsm_export"><code class="xref">fsm_export</code></a></td><td>     <em>exporting FSMs to KISS2 files</em></td>   </tr>   <tr>     <td></td>     <td>         <a href="cmd/fsm_extract.html#cmd-fsm_extract"><code class="xref">fsm_extract</code></a></td><td>     <em>extracting FSMs in design</em></td>   </tr>   <tr>     <td></td>     <td>         <a href="cmd/fsm_info.html#cmd-fsm_info"><code class="xref">fsm_info</code></a></td><td>     <em>print information on finite state machines</em></td>   </tr>   <tr>     <td></td>     <td>         <a href="cmd/fsm_map.html#cmd-fsm_map"><code class="xref">fsm_map</code></a></td><td>     <em>mapping FSMs to basic logic</em></td>   </tr>   <tr>     <td></td>     <td>         <a href="cmd/fsm_opt.html#cmd-fsm_opt"><code class="xref">fsm_opt</code></a></td><td>     <em>optimize finite state machines</em></td>   </tr>   <tr>     <td></td>     <td>         <a href="cmd/fsm_recode.html#cmd-fsm_recode"><code class="xref">fsm_recode</code></a></td><td>     <em>recoding finite state machines</em></td>   </tr>   <tr>     <td></td>     <td>         <a href="cmd/fst2tb.html#cmd-fst2tb"><code class="xref">fst2tb</code></a></td><td>     <em>generate testbench out of fst file</em></td>   </tr>   <tr>     <td></td>     <td>         <a href="cmd/future.html#cmd-future"><code class="xref">future</code></a></td><td>     <em>resolve future sampled value functions</em></td>   </tr>   <tr>     <td></td>     <td>         <a href="cmd/gatemate_foldinv.html#cmd-gatemate_foldinv"><code class="xref">gatemate_foldinv</code></a></td><td>     <em>fold inverters into Gatemate LUT trees</em></td>   </tr>   <tr>     <td></td>     <td>         <a href="cmd/glift.html#cmd-glift"><code class="xref">glift</code></a></td><td>     <em>create GLIFT models and optimization problems</em></td>   </tr>   <tr>     <td></td>     <td>         <a href="cmd/greenpak4_dffinv.html#cmd-greenpak4_dffinv"><code class="xref">greenpak4_dffinv</code></a></td><td>     <em>merge greenpak4 inverters and DFF/latches</em></td>   </tr>   <tr>     <td></td>     <td>         <a href="cmd/help.html#cmd-help"><code class="xref">help</code></a></td><td>     <em>display help messages</em></td>   </tr>   <tr>     <td></td>     <td>         <a href="cmd/hierarchy.html#cmd-hierarchy"><code class="xref">hierarchy</code></a></td><td>     <em>check, expand and clean up design hierarchy</em></td>   </tr>   <tr>     <td></td>     <td>         <a href="cmd/hilomap.html#cmd-hilomap"><code class="xref">hilomap</code></a></td><td>     <em>technology mapping of constant hi- and/or lo-drivers</em></td>   </tr>   <tr>     <td></td>     <td>         <a href="cmd/history.html#cmd-history"><code class="xref">history</code></a></td><td>     <em>show last interactive commands</em></td>   </tr>   <tr>     <td></td>     <td>         <a href="cmd/ice40_braminit.html#cmd-ice40_braminit"><code class="xref">ice40_braminit</code></a></td><td>     <em>iCE40: perform SB_RAM40_4K initialization from file</em></td>   </tr>   <tr>     <td></td>     <td>         <a href="cmd/ice40_dsp.html#cmd-ice40_dsp"><code class="xref">ice40_dsp</code></a></td><td>     <em>iCE40: map multipliers</em></td>   </tr>   <tr>     <td></td>     <td>         <a href="cmd/ice40_opt.html#cmd-ice40_opt"><code class="xref">ice40_opt</code></a></td><td>     <em>iCE40: perform simple optimizations</em></td>   </tr>   <tr>     <td></td>     <td>         <a href="cmd/ice40_wrapcarry.html#cmd-ice40_wrapcarry"><code class="xref">ice40_wrapcarry</code></a></td><td>     <em>iCE40: wrap carries</em></td>   </tr>   <tr>     <td></td>     <td>         <a href="cmd/insbuf.html#cmd-insbuf"><code class="xref">insbuf</code></a></td><td>     <em>insert buffer cells for connected wires</em></td>   </tr>   <tr>     <td></td>     <td>         <a href="cmd/internal_stats.html#cmd-internal_stats"><code class="xref">internal_stats</code></a></td><td>     <em>print internal statistics</em></td>   </tr>   <tr>     <td></td>     <td>         <a href="cmd/iopadmap.html#cmd-iopadmap"><code class="xref">iopadmap</code></a></td><td>     <em>technology mapping of i/o pads (or buffers)</em></td>   </tr>   <tr>     <td></td>     <td>         <a href="cmd/jny.html#cmd-jny"><code class="xref">jny</code></a></td><td>     <em>write design and metadata</em></td>   </tr>   <tr>     <td></td>     <td>         <a href="cmd/json.html#cmd-json"><code class="xref">json</code></a></td><td>     <em>write design in JSON format</em></td>   </tr>   <tr>     <td></td>     <td>         <a href="cmd/keep_hierarchy.html#cmd-keep_hierarchy"><code class="xref">keep_hierarchy</code></a></td><td>     <em>add the keep_hierarchy attribute</em></td>   </tr>   <tr>     <td></td>     <td>         <a href="cmd/lattice_gsr.html#cmd-lattice_gsr"><code class="xref">lattice_gsr</code></a></td><td>     <em>Lattice: handle GSR</em></td>   </tr>   <tr>     <td></td>     <td>         <a href="cmd/license.html#cmd-license"><code class="xref">license</code></a></td><td>     <em>print license terms</em></td>   </tr>   <tr>     <td></td>     <td>         <a href="cmd/log.html#cmd-log"><code class="xref">log</code></a></td><td>     <em>print text and log files</em></td>   </tr>   <tr>     <td></td>     <td>         <a href="cmd/logger.html#cmd-logger"><code class="xref">logger</code></a></td><td>     <em>set logger properties</em></td>   </tr>   <tr>     <td></td>     <td>         <a href="cmd/ls.html#cmd-ls"><code class="xref">ls</code></a></td><td>     <em>list modules or objects in modules</em></td>   </tr>   <tr>     <td></td>     <td>         <a href="cmd/ltp.html#cmd-ltp"><code class="xref">ltp</code></a></td><td>     <em>print longest topological path</em></td>   </tr>   <tr>     <td></td>     <td>         <a href="cmd/lut2mux.html#cmd-lut2mux"><code class="xref">lut2mux</code></a></td><td>     <em>convert $lut to $_MUX_</em></td>   </tr>   <tr>     <td></td>     <td>         <a href="cmd/maccmap.html#cmd-maccmap"><code class="xref">maccmap</code></a></td><td>     <em>mapping macc cells</em></td>   </tr>   <tr>     <td></td>     <td>         <a href="cmd/memory.html#cmd-memory"><code class="xref">memory</code></a></td><td>     <em>translate memories to basic cells</em></td>   </tr>   <tr>     <td></td>     <td>         <a href="cmd/memory_bmux2rom.html#cmd-memory_bmux2rom"><code class="xref">memory_bmux2rom</code></a></td><td>     <em>convert muxes to ROMs</em></td>   </tr>   <tr>     <td></td>     <td>         <a href="cmd/memory_bram.html#cmd-memory_bram"><code class="xref">memory_bram</code></a></td><td>     <em>map memories to block rams</em></td>   </tr>   <tr>     <td></td>     <td>         <a href="cmd/memory_collect.html#cmd-memory_collect"><code class="xref">memory_collect</code></a></td><td>     <em>creating multi-port memory cells</em></td>   </tr>   <tr>     <td></td>     <td>         <a href="cmd/memory_dff.html#cmd-memory_dff"><code class="xref">memory_dff</code></a></td><td>     <em>merge input/output DFFs into memory read ports</em></td>   </tr>   <tr>     <td></td>     <td>         <a href="cmd/memory_libmap.html#cmd-memory_libmap"><code class="xref">memory_libmap</code></a></td><td>     <em>map memories to cells</em></td>   </tr>   <tr>     <td></td>     <td>         <a href="cmd/memory_map.html#cmd-memory_map"><code class="xref">memory_map</code></a></td><td>     <em>translate multiport memories to basic cells</em></td>   </tr>   <tr>     <td></td>     <td>         <a href="cmd/memory_memx.html#cmd-memory_memx"><code class="xref">memory_memx</code></a></td><td>     <em>emulate vlog sim behavior for mem ports</em></td>   </tr>   <tr>     <td></td>     <td>         <a href="cmd/memory_narrow.html#cmd-memory_narrow"><code class="xref">memory_narrow</code></a></td><td>     <em>split up wide memory ports</em></td>   </tr>   <tr>     <td></td>     <td>         <a href="cmd/memory_nordff.html#cmd-memory_nordff"><code class="xref">memory_nordff</code></a></td><td>     <em>extract read port FFs from memories</em></td>   </tr>   <tr>     <td></td>     <td>         <a href="cmd/memory_share.html#cmd-memory_share"><code class="xref">memory_share</code></a></td><td>     <em>consolidate memory ports</em></td>   </tr>   <tr>     <td></td>     <td>         <a href="cmd/memory_unpack.html#cmd-memory_unpack"><code class="xref">memory_unpack</code></a></td><td>     <em>unpack multi-port memory cells</em></td>   </tr>   <tr>     <td></td>     <td>         <a href="cmd/microchip_dffopt.html#cmd-microchip_dffopt"><code class="xref">microchip_dffopt</code></a></td><td>     <em>MICROCHIP: optimize FF control signal usage</em></td>   </tr>   <tr>     <td></td>     <td>         <a href="cmd/microchip_dsp.html#cmd-microchip_dsp"><code class="xref">microchip_dsp</code></a></td><td>     <em>MICROCHIP: pack resources into DSPs</em></td>   </tr>   <tr>     <td></td>     <td>         <a href="cmd/miter.html#cmd-miter"><code class="xref">miter</code></a></td><td>     <em>automatically create a miter circuit</em></td>   </tr>   <tr>     <td></td>     <td>         <a href="cmd/mutate.html#cmd-mutate"><code class="xref">mutate</code></a></td><td>     <em>generate or apply design mutations</em></td>   </tr>   <tr>     <td></td>     <td>         <a href="cmd/muxcover.html#cmd-muxcover"><code class="xref">muxcover</code></a></td><td>     <em>cover trees of MUX cells with wider MUXes</em></td>   </tr>   <tr>     <td></td>     <td>         <a href="cmd/muxpack.html#cmd-muxpack"><code class="xref">muxpack</code></a></td><td>     <em>$mux/$pmux cascades to $pmux</em></td>   </tr>   <tr>     <td></td>     <td>         <a href="cmd/nlutmap.html#cmd-nlutmap"><code class="xref">nlutmap</code></a></td><td>     <em>map to LUTs of different sizes</em></td>   </tr>   <tr>     <td></td>     <td>         <a href="cmd/nx_carry.html#cmd-nx_carry"><code class="xref">nx_carry</code></a></td><td>     <em>NanoXplore: create carry cells</em></td>   </tr>   <tr>     <td></td>     <td>         <a href="cmd/onehot.html#cmd-onehot"><code class="xref">onehot</code></a></td><td>     <em>optimize $eq cells for onehot signals</em></td>   </tr>   <tr>     <td></td>     <td>         <a href="cmd/opt.html#cmd-opt"><code class="xref">opt</code></a></td><td>     <em>perform simple optimizations</em></td>   </tr>   <tr>     <td></td>     <td>         <a href="cmd/opt_clean.html#cmd-opt_clean"><code class="xref">opt_clean</code></a></td><td>     <em>remove unused cells and wires</em></td>   </tr>   <tr>     <td></td>     <td>         <a href="cmd/opt_demorgan.html#cmd-opt_demorgan"><code class="xref">opt_demorgan</code></a></td><td>     <em>Optimize reductions with DeMorgan equivalents</em></td>   </tr>   <tr>     <td></td>     <td>         <a href="cmd/opt_dff.html#cmd-opt_dff"><code class="xref">opt_dff</code></a></td><td>     <em>perform DFF optimizations</em></td>   </tr>   <tr>     <td></td>     <td>         <a href="cmd/opt_expr.html#cmd-opt_expr"><code class="xref">opt_expr</code></a></td><td>     <em>perform const folding and simple expression rewriting</em></td>   </tr>   <tr>     <td></td>     <td>         <a href="cmd/opt_ffinv.html#cmd-opt_ffinv"><code class="xref">opt_ffinv</code></a></td><td>     <em>push inverters through FFs</em></td>   </tr>   <tr>     <td></td>     <td>         <a href="cmd/opt_lut.html#cmd-opt_lut"><code class="xref">opt_lut</code></a></td><td>     <em>optimize LUT cells</em></td>   </tr>   <tr>     <td></td>     <td>         <a href="cmd/opt_lut_ins.html#cmd-opt_lut_ins"><code class="xref">opt_lut_ins</code></a></td><td>     <em>discard unused LUT inputs</em></td>   </tr>   <tr>     <td></td>     <td>         <a href="cmd/opt_mem.html#cmd-opt_mem"><code class="xref">opt_mem</code></a></td><td>     <em>optimize memories</em></td>   </tr>   <tr>     <td></td>     <td>         <a href="cmd/opt_mem_feedback.html#cmd-opt_mem_feedback"><code class="xref">opt_mem_feedback</code></a></td><td>     <em>convert memory read-to-write port feedback paths to write enables</em></td>   </tr>   <tr>     <td></td>     <td>         <a href="cmd/opt_mem_priority.html#cmd-opt_mem_priority"><code class="xref">opt_mem_priority</code></a></td><td>     <em>remove priority relations between write ports that can never collide</em></td>   </tr>   <tr>     <td></td>     <td>         <a href="cmd/opt_mem_widen.html#cmd-opt_mem_widen"><code class="xref">opt_mem_widen</code></a></td><td>     <em>optimize memories where all ports are wide</em></td>   </tr>   <tr>     <td></td>     <td>         <a href="cmd/opt_merge.html#cmd-opt_merge"><code class="xref">opt_merge</code></a></td><td>     <em>consolidate identical cells</em></td>   </tr>   <tr>     <td></td>     <td>         <a href="cmd/opt_muxtree.html#cmd-opt_muxtree"><code class="xref">opt_muxtree</code></a></td><td>     <em>eliminate dead trees in multiplexer trees</em></td>   </tr>   <tr>     <td></td>     <td>         <a href="cmd/opt_reduce.html#cmd-opt_reduce"><code class="xref">opt_reduce</code></a></td><td>     <em>simplify large MUXes and AND/OR gates</em></td>   </tr>   <tr>     <td></td>     <td>         <a href="cmd/opt_share.html#cmd-opt_share"><code class="xref">opt_share</code></a></td><td>     <em>merge mutually exclusive cells of the same type that share an input signal</em></td>   </tr>   <tr>     <td></td>     <td>         <a href="cmd/paramap.html#cmd-paramap"><code class="xref">paramap</code></a></td><td>     <em>renaming cell parameters</em></td>   </tr>   <tr>     <td></td>     <td>         <a href="cmd/peepopt.html#cmd-peepopt"><code class="xref">peepopt</code></a></td><td>     <em>collection of peephole optimizers</em></td>   </tr>   <tr>     <td></td>     <td>         <a href="cmd/plugin.html#cmd-plugin"><code class="xref">plugin</code></a></td><td>     <em>load and list loaded plugins</em></td>   </tr>   <tr>     <td></td>     <td>         <a href="cmd/pmux2shiftx.html#cmd-pmux2shiftx"><code class="xref">pmux2shiftx</code></a></td><td>     <em>transform $pmux cells to $shiftx cells</em></td>   </tr>   <tr>     <td></td>     <td>         <a href="cmd/pmuxtree.html#cmd-pmuxtree"><code class="xref">pmuxtree</code></a></td><td>     <em>transform $pmux cells to trees of $mux cells</em></td>   </tr>   <tr>     <td></td>     <td>         <a href="cmd/portlist.html#cmd-portlist"><code class="xref">portlist</code></a></td><td>     <em>list (top-level) ports</em></td>   </tr>   <tr>     <td></td>     <td>         <a href="cmd/prep.html#cmd-prep"><code class="xref">prep</code></a></td><td>     <em>generic synthesis script</em></td>   </tr>   <tr>     <td></td>     <td>         <a href="cmd/printattrs.html#cmd-printattrs"><code class="xref">printattrs</code></a></td><td>     <em>print attributes of selected objects</em></td>   </tr>   <tr>     <td></td>     <td>         <a href="cmd/proc.html#cmd-proc"><code class="xref">proc</code></a></td><td>     <em>translate processes to netlists</em></td>   </tr>   <tr>     <td></td>     <td>         <a href="cmd/proc_arst.html#cmd-proc_arst"><code class="xref">proc_arst</code></a></td><td>     <em>detect asynchronous resets</em></td>   </tr>   <tr>     <td></td>     <td>         <a href="cmd/proc_clean.html#cmd-proc_clean"><code class="xref">proc_clean</code></a></td><td>     <em>remove empty parts of processes</em></td>   </tr>   <tr>     <td></td>     <td>         <a href="cmd/proc_dff.html#cmd-proc_dff"><code class="xref">proc_dff</code></a></td><td>     <em>extract flip-flops from processes</em></td>   </tr>   <tr>     <td></td>     <td>         <a href="cmd/proc_dlatch.html#cmd-proc_dlatch"><code class="xref">proc_dlatch</code></a></td><td>     <em>extract latches from processes</em></td>   </tr>   <tr>     <td></td>     <td>         <a href="cmd/proc_init.html#cmd-proc_init"><code class="xref">proc_init</code></a></td><td>     <em>convert initial block to init attributes</em></td>   </tr>   <tr>     <td></td>     <td>         <a href="cmd/proc_memwr.html#cmd-proc_memwr"><code class="xref">proc_memwr</code></a></td><td>     <em>extract memory writes from processes</em></td>   </tr>   <tr>     <td></td>     <td>         <a href="cmd/proc_mux.html#cmd-proc_mux"><code class="xref">proc_mux</code></a></td><td>     <em>convert decision trees to multiplexers</em></td>   </tr>   <tr>     <td></td>     <td>         <a href="cmd/proc_prune.html#cmd-proc_prune"><code class="xref">proc_prune</code></a></td><td>     <em>remove redundant assignments</em></td>   </tr>   <tr>     <td></td>     <td>         <a href="cmd/proc_rmdead.html#cmd-proc_rmdead"><code class="xref">proc_rmdead</code></a></td><td>     <em>eliminate dead trees in decision trees</em></td>   </tr>   <tr>     <td></td>     <td>         <a href="cmd/proc_rom.html#cmd-proc_rom"><code class="xref">proc_rom</code></a></td><td>     <em>convert switches to ROMs</em></td>   </tr>   <tr>     <td></td>     <td>         <a href="cmd/qbfsat.html#cmd-qbfsat"><code class="xref">qbfsat</code></a></td><td>     <em>solve a 2QBF-SAT problem in the circuit</em></td>   </tr>   <tr>     <td></td>     <td>         <a href="cmd/ql_bram_merge.html#cmd-ql_bram_merge"><code class="xref">ql_bram_merge</code></a></td><td>     <em>Infers QuickLogic k6n10f BRAM pairs that can operate independently</em></td>   </tr>   <tr>     <td></td>     <td>         <a href="cmd/ql_bram_types.html#cmd-ql_bram_types"><code class="xref">ql_bram_types</code></a></td><td>     <em>Change TDP36K type to subtypes</em></td>   </tr>   <tr>     <td></td>     <td>         <a href="cmd/ql_dsp_io_regs.html#cmd-ql_dsp_io_regs"><code class="xref">ql_dsp_io_regs</code></a></td><td>     <em>change types of QL_DSP2 depending on configuration</em></td>   </tr>   <tr>     <td></td>     <td>         <a href="cmd/ql_dsp_macc.html#cmd-ql_dsp_macc"><code class="xref">ql_dsp_macc</code></a></td><td>     <em>infer QuickLogic multiplier-accumulator DSP cells</em></td>   </tr>   <tr>     <td></td>     <td>         <a href="cmd/ql_dsp_simd.html#cmd-ql_dsp_simd"><code class="xref">ql_dsp_simd</code></a></td><td>     <em>merge QuickLogic K6N10f DSP pairs to operate in SIMD mode</em></td>   </tr>   <tr>     <td></td>     <td>         <a href="cmd/qwp.html#cmd-qwp"><code class="xref">qwp</code></a></td><td>     <em>quadratic wirelength placer</em></td>   </tr>   <tr>     <td></td>     <td>         <a href="cmd/read.html#cmd-read"><code class="xref">read</code></a></td><td>     <em>load HDL designs</em></td>   </tr>   <tr>     <td></td>     <td>         <a href="cmd/read_aiger.html#cmd-read_aiger"><code class="xref">read_aiger</code></a></td><td>     <em>read AIGER file</em></td>   </tr>   <tr>     <td></td>     <td>         <a href="cmd/read_blif.html#cmd-read_blif"><code class="xref">read_blif</code></a></td><td>     <em>read BLIF file</em></td>   </tr>   <tr>     <td></td>     <td>         <a href="cmd/read_ilang.html#cmd-read_ilang"><code class="xref">read_ilang</code></a></td><td>     <em>(deprecated) alias of read_rtlil</em></td>   </tr>   <tr>     <td></td>     <td>         <a href="cmd/read_json.html#cmd-read_json"><code class="xref">read_json</code></a></td><td>     <em>read JSON file</em></td>   </tr>   <tr>     <td></td>     <td>         <a href="cmd/read_liberty.html#cmd-read_liberty"><code class="xref">read_liberty</code></a></td><td>     <em>read cells from liberty file</em></td>   </tr>   <tr>     <td></td>     <td>         <a href="cmd/read_rtlil.html#cmd-read_rtlil"><code class="xref">read_rtlil</code></a></td><td>     <em>read modules from RTLIL file</em></td>   </tr>   <tr>     <td></td>     <td>         <a href="cmd/read_verilog.html#cmd-read_verilog"><code class="xref">read_verilog</code></a></td><td>     <em>read modules from Verilog file</em></td>   </tr>   <tr>     <td></td>     <td>         <a href="cmd/recover_names.html#cmd-recover_names"><code class="xref">recover_names</code></a></td><td>     <em>Execute a lossy mapping command and recover original netnames</em></td>   </tr>   <tr>     <td></td>     <td>         <a href="cmd/rename.html#cmd-rename"><code class="xref">rename</code></a></td><td>     <em>rename object in the design</em></td>   </tr>   <tr>     <td></td>     <td>         <a href="cmd/rmports.html#cmd-rmports"><code class="xref">rmports</code></a></td><td>     <em>remove module ports with no connections</em></td>   </tr>   <tr>     <td></td>     <td>         <a href="cmd/sat.html#cmd-sat"><code class="xref">sat</code></a></td><td>     <em>solve a SAT problem in the circuit</em></td>   </tr>   <tr>     <td></td>     <td>         <a href="cmd/scatter.html#cmd-scatter"><code class="xref">scatter</code></a></td><td>     <em>add additional intermediate nets</em></td>   </tr>   <tr>     <td></td>     <td>         <a href="cmd/scc.html#cmd-scc"><code class="xref">scc</code></a></td><td>     <em>detect strongly connected components (logic loops)</em></td>   </tr>   <tr>     <td></td>     <td>         <a href="cmd/scratchpad.html#cmd-scratchpad"><code class="xref">scratchpad</code></a></td><td>     <em>get/set values in the scratchpad</em></td>   </tr>   <tr>     <td></td>     <td>         <a href="cmd/script.html#cmd-script"><code class="xref">script</code></a></td><td>     <em>execute commands from file or wire</em></td>   </tr>   <tr>     <td></td>     <td>         <a href="cmd/select.html#cmd-select"><code class="xref">select</code></a></td><td>     <em>modify and view the list of selected objects</em></td>   </tr>   <tr>     <td></td>     <td>         <a href="cmd/setattr.html#cmd-setattr"><code class="xref">setattr</code></a></td><td>     <em>set/unset attributes on objects</em></td>   </tr>   <tr>     <td></td>     <td>         <a href="cmd/setparam.html#cmd-setparam"><code class="xref">setparam</code></a></td><td>     <em>set/unset parameters on objects</em></td>   </tr>   <tr>     <td></td>     <td>         <a href="cmd/setundef.html#cmd-setundef"><code class="xref">setundef</code></a></td><td>     <em>replace undef values with defined constants</em></td>   </tr>   <tr>     <td></td>     <td>         <a href="cmd/share.html#cmd-share"><code class="xref">share</code></a></td><td>     <em>perform sat-based resource sharing</em></td>   </tr>   <tr>     <td></td>     <td>         <a href="cmd/shell.html#cmd-shell"><code class="xref">shell</code></a></td><td>     <em>enter interactive command mode</em></td>   </tr>   <tr>     <td></td>     <td>         <a href="cmd/show.html#cmd-show"><code class="xref">show</code></a></td><td>     <em>generate schematics using graphviz</em></td>   </tr>   <tr>     <td></td>     <td>         <a href="cmd/shregmap.html#cmd-shregmap"><code class="xref">shregmap</code></a></td><td>     <em>map shift registers</em></td>   </tr>   <tr>     <td></td>     <td>         <a href="cmd/sim.html#cmd-sim"><code class="xref">sim</code></a></td><td>     <em>simulate the circuit</em></td>   </tr>   <tr>     <td></td>     <td>         <a href="cmd/simplemap.html#cmd-simplemap"><code class="xref">simplemap</code></a></td><td>     <em>mapping simple coarse-grain cells</em></td>   </tr>   <tr>     <td></td>     <td>         <a href="cmd/splice.html#cmd-splice"><code class="xref">splice</code></a></td><td>     <em>create explicit splicing cells</em></td>   </tr>   <tr>     <td></td>     <td>         <a href="cmd/splitcells.html#cmd-splitcells"><code class="xref">splitcells</code></a></td><td>     <em>split up multi-bit cells</em></td>   </tr>   <tr>     <td></td>     <td>         <a href="cmd/splitnets.html#cmd-splitnets"><code class="xref">splitnets</code></a></td><td>     <em>split up multi-bit nets</em></td>   </tr>   <tr>     <td></td>     <td>         <a href="cm